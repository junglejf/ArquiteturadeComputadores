------- FILE ra.asm LEVEL 1 PASS 2
      1  10000 ????						; move a happy face with the joystick by Kirk Israel
      2  10000 ????						; (with a can't'dodge'em line sweeping across the screen)
      3  10000 ????
      4  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE ra.asm
      6  f000					      org	$F000
      7  f000
      8  f000		       00 80	   YPosFromBot =	$80	;
      9  f000		       00 81	   VisiblePlayerLine =	$81	;
     10  f000
     11  f000							;generic start up stuff...
     12  f000				   Start
     13  f000		       78		      SEI
     14  f001		       d8		      CLD
     15  f002		       a2 ff		      LDX	#$FF
     16  f004		       9a		      TXS
     17  f005		       a9 00		      LDA	#0
     18  f007				   ClearMem
     19  f007		       95 00		      STA	0,X
     20  f009		       ca		      DEX
     21  f00a		       d0 fb		      BNE	ClearMem
     22  f00c
     23  f00c		       a9 00		      LDA	#$00	;start with a black background
     24  f00e		       85 09		      STA	COLUBK
     25  f010		       a9 1c		      LDA	#$1C	;lets go for bright yellow, the traditional color for happyfaces
     26  f012		       85 06		      STA	COLUP0
     27  f014							;Setting some variables...
     28  f014		       a9 50		      LDA	#80
     29  f016		       85 80		      STA	YPosFromBot	;Initial Y Position
     30  f018
     31  f018							;; Let's set up the sweeping line. as Missile 1
     32  f018
     33  f018
     34  f018		       a9 02		      LDA	#2
     35  f01a		       85 1e		      STA	ENAM1	;enable it
     36  f01c		       a9 21		      LDA	#33
     37  f01e		       85 07		      STA	COLUP1	;color it
     38  f020
     39  f020		       a9 20		      LDA	#$20
     40  f022		       85 05		      STA	NUSIZ1	;make it quadwidth (not so thin, that)
     41  f024
     42  f024
     43  f024		       a9 f0		      LDA	#$F0	; -1 in the left nibble
     44  f026		       85 23		      STA	HMM1	; of HMM1 sets it to moving
     45  f028
     46  f028
     47  f028							;VSYNC time
     48  f028				   MainLoop
     49  f028		       a9 02		      LDA	#2
     50  f02a		       85 00		      STA	VSYNC
     51  f02c		       85 02		      STA	WSYNC
     52  f02e		       85 02		      STA	WSYNC
     53  f030		       85 02		      STA	WSYNC
     54  f032		       a9 2b		      LDA	#43
     55  f034		       8d 96 02 	      STA	TIM64T
     56  f037		       a9 00		      LDA	#0
     57  f039		       85 00		      STA	VSYNC
     58  f03b
     59  f03b
     60  f03b							;Main Computations; check down, up, left, right
     61  f03b							;general idea is to do a BIT compare to see if
     62  f03b							;a certain direction is pressed, and skip the value
     63  f03b							;change if so
     64  f03b
     65  f03b							;
     66  f03b							;Not the most effecient code, but gets the job done,
     67  f03b							;including diagonal movement
     68  f03b							;
     69  f03b
     70  f03b							; for up and down, we INC or DEC
     71  f03b							; the Y Position
     72  f03b
     73  f03b		       a9 10		      LDA	#%00010000	;Down?
     74  f03d		       2c 80 02 	      BIT	SWCHA
     75  f040		       d0 02		      BNE	SkipMoveDown
     76  f042		       e6 80		      INC	YPosFromBot
     77  f044				   SkipMoveDown
     78  f044
     79  f044		       a9 20		      LDA	#%00100000	;Up?
     80  f046		       2c 80 02 	      BIT	SWCHA
     81  f049		       d0 02		      BNE	SkipMoveUp
     82  f04b		       c6 80		      DEC	YPosFromBot
     83  f04d				   SkipMoveUp
     84  f04d
     85  f04d							; for left and right, we're gonna
     86  f04d							; set the horizontal speed, and then do
     87  f04d							; a single HMOVE.  We'll use X to hold the
     88  f04d							; horizontal speed, then store it in the
     89  f04d							; appropriate register
     90  f04d
     91  f04d
     92  f04d							;assum horiz speed will be zero
     93  f04d		       a2 00		      LDX	#0
     94  f04f
     95  f04f		       a9 40		      LDA	#%01000000	;Left?
     96  f051		       2c 80 02 	      BIT	SWCHA
     97  f054		       d0 06		      BNE	SkipMoveLeft
     98  f056		       a2 10		      LDX	#$10	;a 1 in the left nibble means go left
     99  f058
    100  f058							;; moving left, so we need the mirror image
    101  f058		       a9 08		      LDA	#%00001000	;a 1 in D3 of REFP0 says make it mirror
    102  f05a		       85 0b		      STA	REFP0
    103  f05c
    104  f05c				   SkipMoveLeft
    105  f05c		       a9 80		      LDA	#%10000000	;Right?
    106  f05e		       2c 80 02 	      BIT	SWCHA
    107  f061		       d0 06		      BNE	SkipMoveRight
    108  f063		       a2 f0		      LDX	#$F0	;a -1 in the left nibble means go right...
    109  f065
    110  f065							;; moving right, cancel any mirrorimage
    111  f065		       a9 00		      LDA	#%00000000
    112  f067		       85 0b		      STA	REFP0
    113  f069
    114  f069				   SkipMoveRight
    115  f069
    116  f069
    117  f069		       86 20		      STX	HMP0	;set the move for player 0, not the missile like last time...
    118  f06b
    119  f06b
    120  f06b
    121  f06b							; see if player and missile collide, and change the background color if so
    122  f06b
    123  f06b							;just a review...comparisons of numbers always seem a little backwards to me,
    124  f06b							;since it's easier to load up the accumulator with the test value, and then
    125  f06b							;compare that value to what's in the register we're interested.
    126  f06b							;in this case, we want to see if D7 of CXM1P (meaning Player 0 hit
    127  f06b							; missile 1) is on. So we put 10000000 into the Accumulator,
    128  f06b							;then use BIT to compare it to the value in CXM1P
    129  f06b
    130  f06b		       a9 80		      LDA	#%10000000
    131  f06d		       24 01		      BIT	CXM1P
    132  f06f		       f0 04		      BEQ	NoCollision	;skip if not hitting...
    133  f071		       a5 80		      LDA	YPosFromBot	;must be a hit! load in the YPos...
    134  f073		       85 09		      STA	COLUBK	;and store as the bgcolor
    135  f075				   NoCollision
    136  f075		       85 2c		      STA	CXCLR	;reset the collision detection for next time
    137  f077
    138  f077
    139  f077
    140  f077
    141  f077				   WaitForVblankEnd
    142  f077		       ad 84 02 	      LDA	INTIM
    143  f07a		       d0 fb		      BNE	WaitForVblankEnd
    144  f07c		       a0 bf		      LDY	#191
    145  f07e
    146  f07e
    147  f07e		       85 02		      STA	WSYNC
    148  f080		       85 2a		      STA	HMOVE
    149  f082
    150  f082		       85 01		      STA	VBLANK
    151  f084
    152  f084
    153  f084							;main scanline loop...
    154  f084
    155  f084
    156  f084				   ScanLoop
    157  f084		       85 02		      STA	WSYNC
    158  f086
    159  f086							; here the idea is that VisiblePlayerLine
    160  f086							; is zero if the line isn't being drawn now,
    161  f086							; otherwise it's however many lines we have to go
    162  f086
    163  f086				   CheckActivatePlayer
    164  f086		       c4 80		      CPY	YPosFromBot
    165  f088		       d0 04		      BNE	SkipActivatePlayer
    166  f08a		       a9 08		      LDA	#8
    167  f08c		       85 81		      STA	VisiblePlayerLine
    168  f08e				   SkipActivatePlayer
    169  f08e
    170  f08e
    171  f08e
    172  f08e							;set player graphic to all zeros for this line, and then see if
    173  f08e							;we need to load it with graphic data
    174  f08e		       a9 00		      LDA	#0
    175  f090		       85 1b		      STA	GRP0
    176  f092
    177  f092							;
    178  f092							;if the VisiblePlayerLine is non zero,
    179  f092							;we're drawing it now!
    180  f092							;
    181  f092		       a6 81		      LDX	VisiblePlayerLine	;check the visible player line...
    182  f094		       f0 07		      BEQ	FinishPlayer	;skip the drawing if its zero...
    183  f096				   IsPlayerOn
    184  f096		       bd af f0 	      LDA	BigHeadGraphic-1,X	;otherwise, load the correct line from BigHeadGraphic
    185  f099							;section below... it's off by 1 though, since at zero
    186  f099							;we stop drawing
    187  f099		       85 1b		      STA	GRP0	;put that line as player graphic
    188  f09b		       c6 81		      DEC	VisiblePlayerLine	;and decrement the line count
    189  f09d				   FinishPlayer
    190  f09d
    191  f09d
    192  f09d		       88		      DEY
    193  f09e		       d0 e4		      BNE	ScanLoop
    194  f0a0
    195  f0a0		       a9 02		      LDA	#2
    196  f0a2		       85 02		      STA	WSYNC
    197  f0a4		       85 01		      STA	VBLANK
    198  f0a6		       a2 1e		      LDX	#30
    199  f0a8				   OverScanWait
    200  f0a8		       85 02		      STA	WSYNC
    201  f0aa		       ca		      DEX
    202  f0ab		       d0 fb		      BNE	OverScanWait
    203  f0ad		       4c 28 f0 	      JMP	MainLoop
    204  f0b0
    205  f0b0
    206  f0b0							; here's the actual graphic! If you squint you can see its
    207  f0b0							; upsidedown smiling self
    208  f0b0				   BigHeadGraphic
    209  f0b0		       3c		      .byte.b	#%00111100
    210  f0b1		       7e		      .byte.b	#%01111110
    211  f0b2		       c1		      .byte.b	#%11000001
    212  f0b3		       bf		      .byte.b	#%10111111
    213  f0b4		       ff		      .byte.b	#%11111111
    214  f0b5		       eb		      .byte.b	#%11101011
    215  f0b6		       7e		      .byte.b	#%01111110
    216  f0b7		       3c		      .byte.b	#%00111100
    217  f0b8
    218  fffc					      org	$FFFC
    219  fffc		       00 f0		      .word.w	Start
    220  fffe		       00 f0		      .word.w	Start
