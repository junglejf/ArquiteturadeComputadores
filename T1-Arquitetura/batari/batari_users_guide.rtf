{\rtf1\ansi\ansicpg1252\uc1\deff0\stshfdbch0\stshfloch0\stshfhich0\stshfbi0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f5\fmodern\fcharset0\fprq1{\*\panose 02070409020205020404}Courier;}
{\f35\fswiss\fcharset0\fprq2{\*\panose 020b0604030504040204}Tahoma{\*\falt Lucidasans};}{\f36\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Nimbus Roman No9 L;}{\f37\fmodern\fcharset0\fprq1{\*\panose 00000000000000000000}Bitstream Vera Sans Mono;}
{\f38\fnil\fcharset2\fprq0{\*\panose 00000000000000000000}StarSymbol;}{\f39\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}Bitstream Vera Sans;}{\f186\froman\fcharset238\fprq2 Times New Roman CE;}{\f187\froman\fcharset204\fprq2 Times New Roman Cyr;}
{\f189\froman\fcharset161\fprq2 Times New Roman Greek;}{\f190\froman\fcharset162\fprq2 Times New Roman Tur;}{\f191\froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f192\froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\f193\froman\fcharset186\fprq2 Times New Roman Baltic;}{\f194\froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\f536\fswiss\fcharset238\fprq2 Tahoma CE{\*\falt Lucidasans};}{\f537\fswiss\fcharset204\fprq2 Tahoma Cyr{\*\falt Lucidasans};}
{\f539\fswiss\fcharset161\fprq2 Tahoma Greek{\*\falt Lucidasans};}{\f540\fswiss\fcharset162\fprq2 Tahoma Tur{\*\falt Lucidasans};}{\f541\fswiss\fcharset177\fprq2 Tahoma (Hebrew){\*\falt Lucidasans};}
{\f542\fswiss\fcharset178\fprq2 Tahoma (Arabic){\*\falt Lucidasans};}{\f543\fswiss\fcharset186\fprq2 Tahoma Baltic{\*\falt Lucidasans};}{\f544\fswiss\fcharset163\fprq2 Tahoma (Vietnamese){\*\falt Lucidasans};}
{\f545\fswiss\fcharset222\fprq2 Tahoma (Thai){\*\falt Lucidasans};}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;
\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{
\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext0 Normal;}{\*\cs10 \additive \ssemihidden Default Paragraph Font;}{\*
\ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\trcbpat1\trcfpat1\tscellwidthfts0\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv 
\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1024\langfe1024\cgrid\langnp1024\langfenp1024 \snext11 \ssemihidden Normal Table;}{\s15\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 
\f36\fs24\lang1033\langfe255\cgrid\langnp1033\langfenp255 \snext15 Default;}{\s16\ql \li0\ri0\sa120\nowidctlpar\faauto\rin0\lin0\itap0 \f36\fs24\lang1033\langfe255\cgrid\langnp1033\langfenp255 \sbasedon15 \snext16 Text body;}{
\s17\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f36\fs24\lang1033\langfe255\cgrid\langnp1033\langfenp255 \sbasedon16 \snext17 List;}{\s18\ql \li0\ri0\sb120\sa120\nowidctlpar\faauto\rin0\lin0\itap0 
\i\f36\fs20\lang1033\langfe255\cgrid\langnp1033\langfenp255 \sbasedon15 \snext18 \ssemihidden caption;}{\s19\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \f36\fs24\lang1033\langfe255\cgrid\langnp1033\langfenp255 \sbasedon15 \snext19 Index;}{
\s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs20\lang1033\langfe255\loch\f37\hich\af36\dbch\af0\cgrid\langnp1033\langfenp255 \sbasedon15 \snext20 Preformatted Text;}{\*\cs21 \additive \lang0\langfe255\langfenp255 RTF_Num 2 1;}{\*\cs22 \additive 
\lang0\langfe255\langfenp255 RTF_Num 3 1;}{\*\cs23 \additive \lang0\langfe255\langfenp255 RTF_Num 4 1;}{\*\cs24 \additive \lang0\langfe255\langfenp255 RTF_Num 5 1;}{\*\cs25 \additive \fs18\lang0\langfe255\loch\f38\langfenp255 RTF_Num 6 1;}{\*\cs26 
\additive \fs18\lang0\langfe255\loch\f38\langfenp255 RTF_Num 6 2;}{\*\cs27 \additive \fs18\lang0\langfe255\loch\f38\langfenp255 RTF_Num 6 3;}{\*\cs28 \additive \fs18\lang0\langfe255\loch\f38\langfenp255 RTF_Num 6 4;}{\*\cs29 \additive 
\fs18\lang0\langfe255\loch\f38\langfenp255 RTF_Num 6 5;}{\*\cs30 \additive \fs18\lang0\langfe255\loch\f38\langfenp255 RTF_Num 6 6;}{\*\cs31 \additive \fs18\lang0\langfe255\loch\f38\langfenp255 RTF_Num 6 7;}{\*\cs32 \additive 
\fs18\lang0\langfe255\loch\f38\langfenp255 RTF_Num 6 8;}{\*\cs33 \additive \fs18\lang0\langfe255\loch\f38\langfenp255 RTF_Num 6 9;}{\*\cs34 \additive \fs18\lang0\langfe255\loch\f38\langfenp255 RTF_Num 6 10;}{\*\cs35 \additive 
\fs18\lang0\langfe255\loch\f38\langfenp255 Bullets;}{\*\cs36 \additive \ul\cf9\lang0\langfe255\langfenp255 Internet Link;}{\*\cs37 \additive \lang0\langfe255\loch\f35\langfenp255 Numbering Symbols;}}{\*\listtable{\list\listtemplateid1{\listlevel
\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow2\levelstartat1\levelspace0\levelindent0{\leveltext\'01\'96;}{\levelnumbers;}\f38\fs18 \fi-283\li283\lin283 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow2\levelstartat1\levelspace0
\levelindent0{\leveltext\'01\'96;}{\levelnumbers;}\f38\fs18 \fi-283\li566\lin566 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow2\levelstartat1\levelspace0\levelindent0{\leveltext\'01\'96;}{\levelnumbers;}\f38\fs18 \fi-283\li849\lin849 
}{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow2\levelstartat1\levelspace0\levelindent0{\leveltext\'01\'96;}{\levelnumbers;}\f38\fs18 \fi-283\li1132\lin1132 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow2
\levelstartat1\levelspace0\levelindent0{\leveltext\'01\'96;}{\levelnumbers;}\f38\fs18 \fi-283\li1415\lin1415 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow2\levelstartat1\levelspace0\levelindent0{\leveltext\'01\'96;}{\levelnumbers;}
\f38\fs18 \fi-283\li1698\lin1698 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow2\levelstartat1\levelspace0\levelindent0{\leveltext\'01\'96;}{\levelnumbers;}\f38\fs18 \fi-283\li1981\lin1981 }{\listlevel\levelnfc23\levelnfcn23\leveljc0
\leveljcn0\levelfollow2\levelstartat1\levelspace0\levelindent0{\leveltext\'01\'96;}{\levelnumbers;}\f38\fs18 \fi-283\li2264\lin2264 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow2\levelstartat1\levelspace0\levelindent0{\leveltext
\'01\'96;}{\levelnumbers;}\f38\fs18 \fi-283\li2547\lin2547 }{\listname RTF_Num 6;}\listid1}{\list\listtemplateid2{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow2\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers
\'01;}\fi-283\li283\lin283 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext\'00;}{\levelnumbers;}}{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace0
\levelindent0{\leveltext\'00;}{\levelnumbers;}}{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext\'00;}{\levelnumbers;}}{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0
\levelstartat0\levelspace0\levelindent0{\leveltext\'00;}{\levelnumbers;}}{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext\'00;}{\levelnumbers;}}{\listlevel\levelnfc0\levelnfcn0\leveljc0
\leveljcn0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext\'00;}{\levelnumbers;}}{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext\'00;}{\levelnumbers;}}{\listlevel\levelnfc0
\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext\'00;}{\levelnumbers;}}{\listname RTF_Num 5;}\listid2}{\list\listtemplateid3{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow2\levelstartat2
\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fi-283\li283\lin283 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext\'00;}{\levelnumbers;}}{\listlevel\levelnfc0
\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext\'00;}{\levelnumbers;}}{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext\'00;}{\levelnumbers;}}
{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext\'00;}{\levelnumbers;}}{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext
\'00;}{\levelnumbers;}}{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext\'00;}{\levelnumbers;}}{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace0
\levelindent0{\leveltext\'00;}{\levelnumbers;}}{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext\'00;}{\levelnumbers;}}{\listname RTF_Num 4;}\listid3}{\list\listtemplateid4{\listlevel
\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow2\levelstartat3\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fi-283\li283\lin283 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace0
\levelindent0{\leveltext\'00;}{\levelnumbers;}}{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext\'00;}{\levelnumbers;}}{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0
\levelstartat0\levelspace0\levelindent0{\leveltext\'00;}{\levelnumbers;}}{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext\'00;}{\levelnumbers;}}{\listlevel\levelnfc0\levelnfcn0\leveljc0
\leveljcn0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext\'00;}{\levelnumbers;}}{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext\'00;}{\levelnumbers;}}{\listlevel\levelnfc0
\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext\'00;}{\levelnumbers;}}{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext\'00;}{\levelnumbers;}}
{\listname RTF_Num 3;}\listid4}{\list\listtemplateid5{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow2\levelstartat4\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fi-283\li283\lin283 }{\listlevel\levelnfc0\levelnfcn0
\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext\'00;}{\levelnumbers;}}{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext\'00;}{\levelnumbers;}}{\listlevel
\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext\'00;}{\levelnumbers;}}{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext
\'00;}{\levelnumbers;}}{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext\'00;}{\levelnumbers;}}{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace0
\levelindent0{\leveltext\'00;}{\levelnumbers;}}{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext\'00;}{\levelnumbers;}}{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0
\levelstartat0\levelspace0\levelindent0{\leveltext\'00;}{\levelnumbers;}}{\listname RTF_Num 2;}\listid5}}{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3
\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}}{\*\rsidtbl \rsid1389108}{\*\generator Microsoft Word 10.0.2627;}{\info{\title Note: This guide was written for Alpha 0}{\author i}
{\operator i}{\creatim\yr2005\mo7\dy15\hr22\min29}{\revtim\yr2005\mo7\dy15\hr22\min29}{\printim\yr2113\mo1\dy1}{\version2}{\edmins4}{\nofpages12}{\nofwords2946}{\nofchars16798}{\*\company you}{\nofcharsws19705}{\vern16437}}
\deftab709\widowctrl\ftnbj\aenddoc\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\hyphcaps0\horzdoc\dghspace120\dgvspace120\dghorigin1701\dgvorigin1984\dghshow0\dgvshow3\jcompress\viewkind1\viewscale100\nolnhtadjtbl\rsidroot1389108 \fet0\sectd 
\sbknone\linex0\sectdefaultcl\sftnbj {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl4
\pnlcltr\pnstart1\pnindent720\pnhang {\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}
{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}\pard\plain \s15\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0\pararsid1389108 
\f36\fs24\lang1033\langfe255\cgrid\langnp1033\langfenp255 {\b\fs20\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39 
Note: This guide was written for Alpha 0.1 of Batari Basic.  We have not had time to update it before the release of Alpha 0.2, so some of the information contained within might be inaccurate.  We are working on this }{\b\fs20\loch\af39\insrsid1389108 
\loch\af39\dbch\af0\hich\f36 \endash }{\b\fs20\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39  please \hich\af36\dbch\af0\loch\f39 be \hich\af36\dbch\af0\loch\f39 patient\hich\af36\dbch\af0\loch\f39 !
\par }\pard \s15\qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\b\fs20\loch\af39\insrsid1389108 
\par }{\b\fs20\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39 Batari Basic Users Guide and Command Reference
\par }\pard \s15\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\fs20\loch\af39\insrsid1389108 
\par \hich\af36\dbch\af0\loch\f39 
Welcome to Batari Basic!  You are using the first basic to assembly language complier for the Atari 2600 game system.  (VCS)  Unlike many other game and computer systems, the VCS is sharply limited in what it can do.  While clever programming and addition
\hich\af36\dbch\af0\loch\f39 a\hich\af36\dbch\af0\loch\f39 l hardware can mitigate many limitations, these limitations do have implications on the types of programs you can write. 
\par 
\par 
\par }\pard \s15\qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\b\fs20\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39 Getting started
\par }\pard \s15\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\fs20\loch\af39\insrsid1389108 
\par \hich\af36\dbch\af0\loch\f39 Before you can use this to make programs for the 2600, you need to understand how things work and obtain some addit\hich\af36\dbch\af0\loch\f39 
ional software and documentation.  Your basic Batari Basic development kit is composed of:
\par 
\par {\listtext\pard\plain\s15 \f38\fs18\lang1033\langfe255\langfenp255 \loch\af38\dbch\af0\hich\f38 \'96\tab}}\pard \s15\ql \fi-283\li283\ri0\nowidctlpar\faauto\ls1\rin0\lin283\itap0 {\fs20\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39 
the Batari Basic package
\par {\listtext\pard\plain\s15 \f38\fs18\lang1033\langfe255\langfenp255 \loch\af38\dbch\af0\hich\f38 \'96\tab}\hich\af36\dbch\af0\loch\f39 DASM cross assembler
\par {\listtext\pard\plain\s15 \f38\fs18\lang1033\langfe255\langfenp255 \loch\af38\dbch\af0\hich\f38 \'96\tab}\hich\af36\dbch\af0\loch\f39 Atari Hardware Reference Guides
\par {\listtext\pard\plain\s15 \f38\fs18\lang1033\langfe255\langfenp255 \loch\af38\dbch\af0\hich\f38 \'96\tab}\hich\af36\dbch\af0\loch\f39 an emulator to run your compiled programs on.
\par {\listtext\pard\plain\s15 \f38\fs18\lang1033\langfe255\langfenp255 \loch\af38\dbch\af0\hich\f38 \'96\tab}\hich\af36\dbch\af0\loch\f39 this rough introduction.
\par }\pard \s15\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\fs20\loch\af39\insrsid1389108 
\par }{\b\fs20\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39 Resources\hich\af36\dbch\af0\loch\f39  for the above:
\par }{\fs20\loch\af39\insrsid1389108 
\par }\pard \s15\qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\b\f39\fs20\insrsid1389108 Batari Basic can be downloaded:  }{\field{\*\fldinst {\insrsid1389108 HYPERLINK "http://alienbill.com/2600/basic/" }{\insrsid1389108 {\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b4200000068007400740070003a002f002f0061006c00690065006e00620069006c006c002e0063006f006d002f0032003600300030002f00620061007300690063002f000000}}}{\fldrslt {
\cs36\b\fs20\ul\cf9\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39 http://alienbill.com/2600/basic/}}}{\insrsid1389108 
\par }{\b\fs20\loch\af39\insrsid1389108 
\par }{\b\f39\fs20\insrsid1389108 DASM is available at:  }{\field{\*\fldinst {\insrsid1389108 HYPERLINK "http://www.atari2600.org/DASM/" }{\insrsid1389108 {\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b3e00000068007400740070003a002f002f007700770077002e006100740061007200690032003600300030002e006f00720067002f004400410053004d002f000000}}}{\fldrslt {
\cs36\b\fs20\ul\cf9\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39 http://www.atari2600.org/DASM/}}}{\insrsid1389108 
\par }{\b\fs20\loch\af39\insrsid1389108 
\par }{\b\f39\fs20\insrsid1389108 Emulators:  Stella -- }{\field{\*\fldinst {\insrsid1389108 HYPERLINK "http://sourceforge.net/projects/stella/" }{\insrsid1389108 {\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b5000000068007400740070003a002f002f0073006f00750072006300650066006f007200670065002e006e00650074002f00700072006f006a0065006300740073002f007300740065006c006c0061002f000000}}
}{\fldrslt {\cs36\b\fs20\ul\cf9\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39 http://sourceforge.net/projects/stella/}}}{\insrsid1389108 
\par }{\b\f39\fs20\insrsid1389108                     }{\b\f39\fs20\lang1046\langfe255\langnp1046\insrsid1389108\charrsid1389108 Z26   -- }{\field{\*\fldinst {\lang1046\langfe255\langnp1046\insrsid1389108\charrsid1389108 
HYPERLINK "http://www.whimsey.com/z26/" }{\insrsid1389108 {\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b3800000068007400740070003a002f002f007700770077002e007700680069006d007300650079002e0063006f006d002f007a00320036002f000000}}}{\fldrslt {
\cs36\b\fs20\ul\cf9\lang1046\langfe255\loch\af39\langnp1046\insrsid1389108\charrsid1389108 \hich\af36\dbch\af0\loch\f39 http://www.whimsey.com/z26/}}}{\lang1046\langfe255\langnp1046\insrsid1389108\charrsid1389108 
\par }{\b\fs20\lang1046\langfe255\loch\af39\langnp1046\insrsid1389108\charrsid1389108 
\par }{\b\f39\fs20\insrsid1389108 Programming Guides:   }{\field{\*\fldinst {\insrsid1389108 HYPERLINK "http://stella.sourceforge.net/download/stella.txt" }{\insrsid1389108 {\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b6400000068007400740070003a002f002f007300740065006c006c0061002e0073006f00750072006300650066006f007200670065002e006e00650074002f0064006f0077006e006c006f00610064002f0073007400
65006c006c0061002e007400780074000000}}}{\fldrslt {\cs36\b\fs20\ul\cf9\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39 http://stella.sourceforge.net/download/stella.txt}}}{\insrsid1389108 
\par }\pard \s15\qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0\pararsid1389108 {\b\f39\fs20\insrsid1389108                                       }{\field{\*\fldinst {\insrsid1389108 HYPERLINK "http://www.atariage.com/forums/index.php?showtopic=47479" }{
\insrsid1389108 {\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7200000068007400740070003a002f002f007700770077002e00610074006100720069006100670065002e0063006f006d002f0066006f00720075006d0073002f0069006e006400650078002e007000680070003f00
730068006f00770074006f007000690063003d00340037003400370039000000}}}{\fldrslt {\cs36\b\fs20\ul\cf9\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39 http://www.atariage.com/forums/index.php?showtopic=47479}}}{\insrsid1389108 
\par }\pard \s15\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\fs20\loch\af39\insrsid1389108 
\par \hich\af36\dbch\af0\loch\f39 I'm not goin\hich\af36\dbch\af0\loch\f39 g to detail installation issues here as each of these has their own documentation.  Please refer to those documents and adapt for your computing platform as necessary.
\par 
\par }{\f39\fs20\insrsid1389108 You can test your emulator with the sample executable machine language files found on the Semi Official Batari Basic page that lives at:  }{\field{\*\fldinst {\insrsid1389108 HYPERLINK "http://alienbill.com/2600/basic/" }{
\insrsid1389108 {\*\datafield 00d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b4200000068007400740070003a002f002f0061006c00690065006e00620069006c006c002e0063006f006d002f0032003600300030002f00620061007300690063002f000000}}
}{\fldrslt {\cs36\fs20\ul\cf9\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39 http://alienbill.com/2600/basic/.}}}{\insrsid1389108 
\par }{\fs20\loch\af39\insrsid1389108 
\par \hich\af36\dbch\af0\loch\f39 DASM can be tested with the sample \hich\af36\dbch\af0\loch\f39 assembly programs that come with the package and the basic compiler includes a sample program to compile as well.  
\par 
\par 
\par }\pard \s15\qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\b\fs20\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39 Make sure it all works
\par }\pard \s15\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\fs20\loch\af39\insrsid1389108 
\par \hich\af36\dbch\af0\loch\f39 Before you attempt any real programming, it's a good idea to verify the tools and your work flow before continuing\hich\af36\dbch\af0\loch\f39 
.  The following instructions are for Linux users and reflect the steps I used to get started:
\par 
\par \hich\af36\dbch\af0\loch\f39 (Perhaps someone can add win32 and Mac at some point in the future.)
\par 
\par \hich\af36\dbch\af0\loch\f39 Make a new directory to contain the compiler, download it and unzip it into this directory\hich\af36\dbch\af0\loch\f39 .  For Linux, Unix, Mac you will need to build the program.  All I had to do was:
\par }{\b\fs20\loch\af5\insrsid1389108 \hich\af36\dbch\af0\loch\f5 make all
\par }{\fs20\loch\af39\insrsid1389108 
\par \hich\af36\dbch\af0\loch\f39 and the thing compiled just fine.  For some reason, my compiled executable did not have the execute bit set.  To fix this:
\par 
\par \hich\af36\dbch\af0\loch\f39 chmod +x 2660bas
\par 
\par \hich\af36\dbch\af0\loch\f39 That should be all it \hich\af36\dbch\af0\loch\f39 takes to get your Batari Basic compiler up and running.
\par 
\par \hich\af36\dbch\af0\loch\f39 Download DASM, and unzip it here as well.  You will end up with a sub-folder full of example files, headers, sample assembly code and executables for many platforms.  Add the appropriate DASM executa
\hich\af36\dbch\af0\loch\f39 ble to your path, or copy it to this working directory.  (A link works well too!)
\par 
\par \hich\af36\dbch\af0\loch\f39 Install the Stella 2600 emulator and test it by typing }{\fs20\loch\af39\insrsid1389108 \loch\af39\dbch\af0\hich\f36 \'93}{\fs20\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39 stella}{\fs20\loch\af39\insrsid1389108 
\loch\af39\dbch\af0\hich\f36 \'94}{\fs20\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39 at the command line.  You should get the help screen showing lots of different options.  
\par 
\par \hich\af36\dbch\af0\loch\f39 You now have just e\hich\af36\dbch\af0\loch\f39 nough to test things out.
\par }{\insrsid1389108 
\par }{\fs20\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39 The compiler comes with a sample program that will serve nicely to test your programing tool chain, summarized below.
\par 
\par \hich\af36\dbch\af0\loch\f39 The compiler takes a text file containing the basic language statements and produces an assembly language file.  Be sure you are using a text editor, not a word processor.  
\par 
\par \hich\af36\dbch\af0\loch\f39 This file by itself is not enough to assemble into a working 2600 executable bina\hich\af36\dbch\af0\loch\f39 
ry file.  You need to combine this file, along with a header and footer file together before assembling with DASM.  If successful, DASM will produce a working binary file that can be run with whatever 2600 emulator you have installed.
\par 
\par {\listtext\pard\plain\s15 \fs20\lang1033\langfe255\loch\af39\hich\af36\langfenp255 \hich\af36\dbch\af0\loch\f39 1.\tab}}\pard \s15\ql \fi-283\li283\ri0\nowidctlpar\faauto\ls2\rin0\lin283\itap0 {\fs20\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39 
Compile sample.bas
\par }\pard \s15\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\insrsid1389108 
\par }{\fs20\loch\af5\insrsid1389108 \hich\af36\dbch\af0\loch\f5 ./2600bas<sample.bas>sample.asm
\par }{\insrsid1389108 
\par }{\fs20\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39 This runs the compiler, feeds it the sample.bas text file on standard in and it outputs the compiled assembly language text file as sample.asm
\par 
\par \hich\af36\dbch\af0\loch\f39 You should see the following after doing this:
\par }{\insrsid1389108 
\par }{\fs20\loch\af5\insrsid1389108 \hich\af36\dbch\af0\loch\f5 2600 Basic compilation complete.
\par }{\fs20\loch\af39\insrsid1389108 
\par 
\par {\listtext\pard\plain\s15 \fs20\lang1033\langfe255\loch\af39\hich\af36\langfenp255 \hich\af36\dbch\af0\loch\f39 2.\tab}}\pard \s15\ql \fi-283\li283\ri0\nowidctlpar\faauto\ls3\rin0\lin283\itap0 {\fs20\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39 
Combine compiled assembly language source (text file) with necessary header and footer.
\par }\pard \s15\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\insrsid1389108 
\par }{\fs20\loch\af5\insrsid1389108 \hich\af36\dbch\af0\loch\f5 cat 2600basic.asm sample.asm 2600basicfooter.asm > test.asm
\par }{\insrsid1389108 
\par }{\fs20\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39 This will output nothing, but you can check to see that test.asm exis\hich\af36\dbch\af0\loch\f39 
ts and that its size should equal the three files combined.  (2600basic.asm, sample.asm, 2600basicfooter.asm)
\par 
\par 
\par {\listtext\pard\plain\s15 \fs20\lang1033\langfe255\loch\af39\hich\af36\langfenp255 \hich\af36\dbch\af0\loch\f39 3.\tab}}\pard \s15\ql \fi-283\li283\ri0\nowidctlpar\faauto\ls4\rin0\lin283\itap0 {\fs20\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39 
Assemble your program and produce executable.
\par }\pard \s15\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\insrsid1389108 
\par }{\f5\fs20\insrsid1389108 ./dasm test.asm -f3 -otest.bin}{\f39\fs20\insrsid1389108 (Assuming you copied dasm to your working directory)}{\loch\af35\insrsid1389108 
\par }{\insrsid1389108 
\par You should see the following:}{\loch\af35\insrsid1389108 
\par }{\insrsid1389108 
\par }{\fs20\lang1046\langfe255\loch\af5\langnp1046\insrsid1389108\charrsid1389108 \hich\af36\dbch\af0\loch\f5 DASM V2.20.09, Macro Assembler (C)1988-2003
\par }{\fs20\loch\af5\insrsid1389108 \hich\af36\dbch\af0\loch\f5 Warning: Unable to open 'vcs.h'
\par \hich\af36\dbch\af0\loch\f5 Warning: Unable to open 'macro.h'
\par \hich\af36\dbch\af0\loch\f5 Warning: Unable to open '2600basic.h'
\par \hich\af36\dbch\af0\loch\f5 Warning: Unable to open 'vcs.h'
\par \hich\af36\dbch\af0\loch\f5 Warning: Unable to open 'macro.h'
\par \hich\af36\dbch\af0\loch\f5 Warning: Unable to open '2600basic.h'
\par \hich\af36\dbch\af0\loch\f5 Warning: Unable to open 'vcs.h'
\par \hich\af36\dbch\af0\loch\f5 Warning: Unable to open 'macro.h'
\par \hich\af36\dbch\af0\loch\f5 Warning: Unable to open '2600basic.h'
\par \hich\af36\dbch\af0\loch\f5 Complete.
\par }{\insrsid1389108 
\par }{\fs20\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39 Ignore the warnings, they are not significant at this stage.
\par 
\par \hich\af36\dbch\af0\loch\f39 A new file called test.bin should now exi\hich\af36\dbch\af0\loch\f39 st in your working directory.
\par 
\par 
\par {\listtext\pard\plain\s15 \fs20\lang1033\langfe255\loch\af39\hich\af36\langfenp255 \hich\af36\dbch\af0\loch\f39 4.\tab}}\pard \s15\ql \fi-283\li283\ri0\nowidctlpar\faauto\ls5\rin0\lin283\itap0 {\fs20\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39 
Run completed program with emulator.
\par }\pard \s15\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\insrsid1389108 
\par }{\fs20\loch\af5\insrsid1389108 \hich\af36\dbch\af0\loch\f5 Stella test.bin
\par }{\insrsid1389108 
\par }{\fs20\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39 You should get a new window showing the graphics generated by the sample program.  One of the graphics can be moved with joystick 0 to verify proper emulator configura
\hich\af36\dbch\af0\loch\f39 tion.
\par 
\par \hich\af36\dbch\af0\loch\f39 Done!
\par 
\par \hich\af36\dbch\af0\loch\f39 Now you are ready to begin writing your own programs using the work flow described to compile and assemble them for execution in the emulator.
\par 
\par \hich\af36\dbch\af0\loch\f39 
Writing programs is done with your favorite text editor.  It's a good idea to save them with the .bas extension, but not required.  If you specify the name of your program correctly on the command line, detailed above, it will be compiled.
\par 
\par 
\par }\pard \s15\qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\b\fs20\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39 Understanding \hich\af36\dbch\af0\loch\f39 how the display kernel affects your program
\par }\pard \s15\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\fs20\loch\af39\insrsid1389108 
\par \hich\af36\dbch\af0\loch\f39 The 2600 has no bitmapped display.  Everything is done with the CPU.  In order to make things easier for new programmers, the Batari Basic programming environment makes a few assumptions in order to manage the d
\hich\af36\dbch\af0\loch\f39 isplay and allow your program to run.   These assumptions are:
\par 
\par \hich\af36\dbch\af0\loch\f39 Two player graphics, AKA Sprites, one color 32 x 11 playfield, and a score display form the display kernel under which your basic program will run.
\par 
\par \hich\af36\dbch\af0\loch\f39 You can define the shapes of the two sprite\hich\af36\dbch\af0\loch\f39 
s and turn the playfield pixels on and off.  It's possible to manipulate the score too, but I have not yet explored that.   Changing colors, detecting hardware collisions (where things overlap), making sounds and processing user input is done through the 
\hich\af36\dbch\af0\loch\f39 2\hich\af36\dbch\af0\loch\f39 600 hardware registers, or simple basic commands in most cases.
\par 
\par \hich\af36\dbch\af0\loch\f39 While this seems limited, it does allow for complete games to be made with some creative programming, which is what the 2600 is all about.
\par 
\par \hich\af36\dbch\af0\loch\f39 It is also possible to compile a game, then edit th\hich\af36\dbch\af0\loch\f39 
e assembly language file directly to accomplish things not yet possible with the basic programming language commands alone.  In this way, the Batari Basic compiler can act as a rough prototyping and learning tool for more advanced 2600 programming.  

\par 
\par \hich\af36\dbch\af0\loch\f39 Diff\hich\af36\dbch\af0\loch\f39 
erent display kernels, or your own custom display kernel may be options in the near future.  For now however, we are going to focus on making use of the kernel that comes with the Batari Basic compiler package.  
\par 
\par 
\par 
\par }\pard \s15\qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\b\fs20\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39 Command Reference
\par }\pard \s15\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\fs20\loch\af39\insrsid1389108 
\par \hich\af36\dbch\af0\loch\f39 This section document\hich\af36\dbch\af0\loch\f39 
s the commands I have used, their syntax and limits.  Other commands are available, but I'm going to stick with the ones I know.  Perhaps others can expand on this guide as more information and development become a reality.
\par 
\par 
\par }{\b\fs20\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39 Spaces and line numbers
\par }{\fs20\loch\af39\insrsid1389108 
\par \hich\af36\dbch\af0\loch\f39 Right\hich\af36\dbch\af0\loch\f39 
 now, each element of a program statement must be separated, from the others, by one and only one white space.  This is likely to change, but that's not the way it is today.  Given the overall simplicity of the statements and their syntax, this is not as 
\hich\af36\dbch\af0\loch\f39 d\hich\af36\dbch\af0\loch\f39 ifficult as it seems.
\par 
\par \hich\af36\dbch\af0\loch\f39 Line numbers start each line and tell the compiler the order of program instructions to be compiled.  It's wise to separate commands by at least 10 numbers to allow for easy insertions without having to renumber things.
\par 
\par \hich\af36\dbch\af0\loch\f39 Here is an example program statement:
\par }{\insrsid1389108 
\par }\pard\plain \s20\ql \li0\ri0\sa283\nowidctlpar\faauto\rin0\lin0\itap0 \fs20\lang1033\langfe255\loch\af37\hich\af36\dbch\af0\cgrid\langnp1033\langfenp255 {\loch\af5\insrsid1389108 \hich\af36\dbch\af0\loch\f5 47 a = a + 1
\par }{\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39 This adds 1 to whatever value the variable 'a' currently is, with the line number being 47.
\par \hich\af36\dbch\af0\loch\f39 Another, more complex example:
\par }{\loch\af5\insrsid1389108 \hich\af36\dbch\af0\loch\f5 30 COLUP0 = 120 : player0x = x : player0y = y
\par }{\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39 Multiple commands can be placed on \hich\af36\dbch\af0\loch\f39 
one line, using a colon to separate between them. These will execute from left to right.  The value 120 decimal is written to the player 0 color hardware register, thus defining the color of that player when displayed on the screen.  The next two statemen
\hich\af36\dbch\af0\loch\f39 t\hich\af36\dbch\af0\loch\f39 
s assign the values of x and y to the location variables that control the player screen position.  How this works depends on the kernel.  The location variables are not hardware position registers, but locations in the limited 128 bytes of ram that comes 
\hich\af36\dbch\af0\loch\f39 w\hich\af36\dbch\af0\loch\f39 ith the 2600 game machine.  The kernel uses these numbers to place the player at the desired screen location for you automatically as if the 2600 did actually have hardware position registers.

\par 
\par }{\b\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39 Variables and RAM
\par }{\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39 The 2600 has only a very limited amount of s\hich\af36\dbch\af0\loch\f39 
ystem RAM.  (128 Bytes)  Each basic language variable is an 8 bit unsigned integer number that is stored in one of the available bytes of RAM.  This means each variable can hold a number between 0 and 255 ($00 - $ff).  The playfield graphics are also loca
\hich\af36\dbch\af0\loch\f39 t\hich\af36\dbch\af0\loch\f39 
ed in this ram, consuming a total of 40 bytes with each bit being one specific pixel.  There are commands to manipulate pixels for you.  This simulates a coarse bitmap display that covers the usable screen area.  It is a good idea to keep the number of va
\hich\af36\dbch\af0\loch\f39 r\hich\af36\dbch\af0\loch\f39 iables you want to use in your program to a minimum or you risk running out of RAM.
\par \hich\af36\dbch\af0\loch\f39 Variables are single letters, at the moment, with the compiler taking care of their actual memory locations for you automatically.  
\par }{\b\loch\af39\insrsid1389108 
\par \hich\af36\dbch\af0\loch\f39 Hardware Registers
\par }{\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39 These registers are\hich\af36\dbch\af0\loch\f39 
 specific locations in the 2600 memory space that are used to communicate with the hardware chips in the 2600.  Many of the basic commands make use of them as part of their function.  You may also refer to them, as demonstrated above, to either set values
\hich\af36\dbch\af0\loch\f39  \hich\af36\dbch\af0\loch\f39 or read values.  Changing the background color is an example, shown above, of setting a value.  Reading the joystick trigger state would be an example of reading a value.  
\par \hich\af36\dbch\af0\loch\f39 In general, the registers you write to, do not return the value written.  This mean\hich\af36\dbch\af0\loch\f39 
s you need to keep values in variables if you plan to make repeated use of them.  The names of the registers are contained in the vcs.h header file used for assembly.  You can refer to these by their name as shown in the example above.  It would be a good
\hich\af36\dbch\af0\loch\f39  \hich\af36\dbch\af0\loch\f39 idea to consult the stella programming guide, linked above, for better understanding of what these registers do as not all of their functions have been converted into basic language keywords yet.

\par 
\par }{\b\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39 Math operators
\par }{\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39 Since each variable is an 8-bit unsigned int\hich\af36\dbch\af0\loch\f39 
eger number, the math you can perform is very limited.  Variables will not overflow, but will wrap around to zero again.  If this is not clear, maybe this example will be:
\par }{\f5\insrsid1389108 10 a = 5}{\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39 (Of course, a = 5)
\par }{\f5\insrsid1389108 20 a = a + 1}{\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39 (a now = 6)
\par }{\f5\insrsid1389108 30 a = a + 255 }{\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39 (a now equals 5 ag\hich\af36\dbch\af0\loch\f39 ain due to wraparound occuring)
\par }{\f5\insrsid1389108 40 a = a + 400 }{\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39 
(not wise in that this value exceeds the range permitted, I'm not sure what would happen in this case because the constant 400 is a two byte number being added to a one byte one.)
\par \hich\af36\dbch\af0\loch\f39 Subtraction is permitted as w\hich\af36\dbch\af0\loch\f39 ell:
\par }{\loch\af5\insrsid1389108 \hich\af36\dbch\af0\loch\f5 50 a = a - 1
\par }{\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39 Division (by two only)
\par }{\loch\af5\insrsid1389108 \hich\af36\dbch\af0\loch\f5 60 a = a / 2
\par }{\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39 Multiply (by two only)
\par }{\loch\af5\insrsid1389108 \hich\af36\dbch\af0\loch\f5 70 a = a * 2
\par }{\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39 Boolean operators are permitted:
\par }{\loch\af5\insrsid1389108 \hich\af36\dbch\af0\loch\f5 80 a = a & 45
\par }{\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39 Complex expressions are not yet part of the language.  Keep things simple and it will just work.  Eg:
\par \hich\af36\dbch\af0\loch\f39 90 a = a + 31 : a = a / 2 : a = a / 2
\par \hich\af36\dbch\af0\loch\f39 The above means add 31 to a, then divide a by 2, then do it again to get a divided by 4.
\par \hich\af36\dbch\af0\loch\f39 You can't do such things like:
\par \hich\af36\dbch\af0\loch\f39 95 a = (( b / 2) + (c * 2)) + 32
\par \hich\af36\dbch\af0\loch\f39 , but you probably will someday.
\par \hich\af36\dbch\af0\loch\f39 There is more, but this should g\hich\af36\dbch\af0\loch\f39 
ive you the idea of how math is done.  The reality is that you don't need much to write games and the limited operations map directly to the operators built into the 2600 6502 CPU.
\par 
\par }{\b\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39 Comparisons
\par }{\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39 The usual stuff is permitted here, but only for simple if }{\loch\af39\insrsid1389108 \loch\af39\dbch\af0\hich\f36 \endash }{\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39  th
\hich\af36\dbch\af0\loch\f39 en constructs.  If you need more complex logic, chain comparisons together with gotos.  Eg:
\par }{\loch\af5\insrsid1389108 \hich\af36\dbch\af0\loch\f5 30 if a > x then 50
\par \hich\af36\dbch\af0\loch\f5 40 x = x + 1
\par \hich\af36\dbch\af0\loch\f5 50 x = x + 2
\par }{\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39 These three lines will add 2 to x, if a is greater than x; otherwise add 3.
\par \hich\af36\dbch\af0\loch\f39 eg:  if a > x then x = x + 2 else x = x + \hich\af36\dbch\af0\loch\f39 3
\par \hich\af36\dbch\af0\loch\f39 Again, Batari Basic does not have if then else constructs just yet, I wrote the above to clarify how this is done within the constraints of the compiler.
\par \hich\af36\dbch\af0\loch\f39 You can chain statements together to get more than one thing done per comparison however:
\par }{\loch\af5\insrsid1389108 \hich\af36\dbch\af0\loch\f5 40 if a = \hich\af36\dbch\af0\loch\f5 x then x = x + 5 : b = 50 : goto 60
\par \hich\af36\dbch\af0\loch\f5 50 x = x + 3
\par \hich\af36\dbch\af0\loch\f5 60 c = 5 : AUDV0 = 0
\par }{\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39 A zero is considered false and anything else is considered to be true.  You can write:
\par }{\b\loch\af5\insrsid1389108 \hich\af36\dbch\af0\loch\f5 50 if x then 60
\par }{\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39 This line takes advantage of a couple shortcuts.  If the variable x holds anything \hich\af36\dbch\af0\loch\f39 
but a zero, program execution will begin at line 60.  No equals sign and no goto keyword is necessary for this to all work.  
\par 
\par }{\b\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39 Code limits
\par }{\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39 The 2600 has a limited 4K ROM space for your program instructions.  Bank switching schemes have greatly extended this\hich\af36\dbch\af0\loch\f39 
, but Batari basic is a 4K environment for now.  Do as much as you can with as few statements and variables as possible to keep things within the 4K ROM and 128 Byte RAM limits.
\par \hich\af36\dbch\af0\loch\f39 If you exceed 4K of program instruction size, you will get a compile error.
\par \hich\af36\dbch\af0\loch\f39 
On the topic of code size, you must understand the basic statements are being converted into assembly language.  This is where the 4Kbyte limit comes into play.  Using short cut statements, like the last comparison example shown above, does nothing to red
\hich\af36\dbch\af0\loch\f39 u\hich\af36\dbch\af0\loch\f39 ce final code size because the assembly language generated would be the same, shortcut or not.  
\par 
\par }\pard \s20\qc \li0\ri0\sa283\nowidctlpar\faauto\rin0\lin0\itap0 {\b\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39 Program structure and flow
\par }\pard \s20\ql \li0\ri0\sa283\nowidctlpar\faauto\rin0\lin0\itap0 {\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39 Your program can be broken into 4 distinct parts because of how the display must be drawn each video frame.  For NTSC systems, one 
\hich\af36\dbch\af0\loch\f39 
frame is drawn 60 times per second.  This will be reflected as a loop in your program.  Before this loop is init code. The loop itself can be broken down into two parts.  Drawing the display and performing game logic.  The two parts are separated by the d
\hich\af36\dbch\af0\loch\f39 r\hich\af36\dbch\af0\loch\f39 awscreen command.  After the loop comes special subroutines to be executed as needed during the vertical blank time, if needed thus:
\par }{\cf13\loch\af5\insrsid1389108 \hich\af36\dbch\af0\loch\f5 05 rem init to happen once on start or reset (goto 5)\line 10 x = 0 : y = 5 : COLBK = 30\line 20 pfhline 2 3 20 }{\loch\af5\insrsid1389108 \line \line \line \hich\af36\dbch\af0\loch\f5 
30 rem display loop (Happens every frame)\line 40 player0x = x : player0y = y : l = l - 1\line 45 player0:\line %01000010\line %11111111\line %11111111\line %00000000\line end\line 46 player1:\line %00011000\line %00111100\line %01111110\line %00111100
\line %00011000\line end\line 90 drawscreen\line 91 rem This ends the display secti\hich\af36\dbch\af0\loch\f5 o\hich\af36\dbch\af0\loch\f5 n and a frame has been drawn ?\line 
92 rem entering VBI period where you have a fair number of cycles to do game logic.  Anything below the drawscreen command will be executed once a full video frame has been displayed.  \line \line \line }{\cf13\loch\af5\insrsid1389108 
\hich\af36\dbch\af0\loch\f5 170 rem game logic, move player posit\hich\af36\dbch\af0\loch\f5 ions, check collisions, etc...\line 180 if joy0left then x = x - 1\line 190 if joy0right then x = x + 1\line 200 if something then goto 400 \line 
210 do something else\line 230 goto 30\line 231 rem without this goto and the one on line 420, your game does nothing but display 1 frame a\hich\af36\dbch\af0\loch\f5 n\hich\af36\dbch\af0\loch\f5 d crash.}{\loch\af5\insrsid1389108 \line \line 
\hich\af36\dbch\af0\loch\f5 400 rem subroutine\line 410 COLBK = 5\line 420 goto 230
\par }{\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39 Lines 5-20 are init code.  They only happen once when the whole things starts running.  Set your initial variable values here.  Timing is not critical here.
\par \hich\af36\dbch\af0\loch\f39 Lines 30 }{\loch\af39\insrsid1389108 \loch\af39\dbch\af0\hich\f36 \endash }{\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39  90 are executed while the screen\hich\af36\dbch\af0\loch\f39 
 display is being drawn.  The actual mechanics are more complex than that, but keep commands to a minimum here because the available CPU time must be shared between on-screen graphics and your program commands.
\par \hich\af36\dbch\af0\loch\f39 Lines 170 to 231 are game logic code.  You ha\hich\af36\dbch\af0\loch\f39 
ve plenty of time, but not too much time before the screen must be drawn again.  Do what you need to, but be aware of wasteful codes.  This is where the bulk of your calculations and comparisons will occur.
\par \hich\af36\dbch\af0\loch\f39 Lines 400 }{\loch\af39\insrsid1389108 \loch\af39\dbch\af0\hich\f36 \endash }{\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39  420 represent a subroutine that will \hich\af36\dbch\af0\loch\f39 
execute after the drawscreen command.  Subroutines are good for tasks that only need to be done when a condition is met.  There is no requirement they be placed in the highest number space, but it does make things easier to understand later.
\par \hich\af36\dbch\af0\loch\f39 To summarize: \hich\af36\dbch\af0\loch\f39  Program flow looks like this:
\par }{\b\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39 init 
\par \hich\af36\dbch\af0\loch\f39 draw the screen
\par \hich\af36\dbch\af0\loch\f39 perform logic
\par \hich\af36\dbch\af0\loch\f39 loop back to draw screen again.
\par }{\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39 If this remains confusing, read the introductory material found in the Atari Age newbie programming forum.  If you forget everything you just read, remember \hich\af36\dbch\af0\loch\f39 
your program needs to be a loop.  If it's not, nothing is going to happen on the 2600.
\par }{\b\loch\af39\insrsid1389108 
\par }\pard \s20\qc \li0\ri0\sa283\nowidctlpar\faauto\rin0\lin0\itap0 {\b\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39 Command syntax and limits
\par }\pard \s20\ql \li0\ri0\sa283\nowidctlpar\faauto\rin0\lin0\itap0 {\b\f5\insrsid1389108 let}{\loch\af39\insrsid1389108 \{\hich\af36\dbch\af0\loch\f39 variable\} = \{constant\} or \{variable\}
\par \hich\af36\dbch\af0\loch\f39 Assigns value to RAM variable.  Limit of 8 bits. (0 }{\loch\af39\insrsid1389108 \loch\af39\dbch\af0\hich\f36 \endash }{\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39  255)  Optional really, one could just use a = 5
\hich\af36\dbch\af0\loch\f39 , for example.  Eg:
\par \hich\af36\dbch\af0\loch\f39 10 let a = 5
\par 
\par \{}{\b\f5\insrsid1389108 hardware register}{\loch\af39\insrsid1389108 \}\hich\af36\dbch\af0\loch\f39  = \{variable\} or \{constant\}
\par \hich\af36\dbch\af0\loch\f39 Writes value to hardware register.  Eg:
\par }{\b\loch\af5\insrsid1389108 \hich\af36\dbch\af0\loch\f5 410 COLBK = 5
\par }{\loch\af39\insrsid1389108 
\par }{\b\f5\insrsid1389108 If}{\loch\af39\insrsid1389108 \{\hich\af36\dbch\af0\loch\f39 expression is true\} }{\b\f5\insrsid1389108 then}{\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39  \{statements and expressions\}
\par \hich\af36\dbch\af0\loch\f39 In general, single comparisons are ok, more complext and, or, n\hich\af36\dbch\af0\loch\f39 ot, else, etc... not yet implemented.  Eg:
\par }{\b\loch\af5\insrsid1389108 \hich\af36\dbch\af0\loch\f5 30 if a > x then 50
\par }{\loch\af5\insrsid1389108 
\par }{\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39 Player sprite definition table as shown below:
\par }\pard \s20\ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\loch\af5\insrsid1389108 \hich\af36\dbch\af0\loch\f5 45 }{\b\loch\af5\insrsid1389108 \hich\af36\dbch\af0\loch\f5 player0}{\loch\af5\insrsid1389108 \hich\af36\dbch\af0\loch\f5 :
\par \hich\af36\dbch\af0\loch\f5 %01000010
\par \hich\af36\dbch\af0\loch\f5 %11111111
\par \hich\af36\dbch\af0\loch\f5 %11111111
\par \hich\af36\dbch\af0\loch\f5 %00000000
\par }\pard \s20\ql \li0\ri0\sa283\nowidctlpar\faauto\rin0\lin0\itap0 {\b\loch\af5\insrsid1389108 \hich\af36\dbch\af0\loch\f5 end
\par }{\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39 No space\hich\af36\dbch\af0\loch\f39 
s, other than the one between the line number and the player0 command are allowed.  Players can be any practical length.  Right now, player0 and player1 are implemented.  I'm not totally sure where these should be placed.  Both the example program and my 
\hich\af36\dbch\af0\loch\f39 b\hich\af36\dbch\af0\loch\f39 
reakout clone put them in the display section of the code.  Given the limited indexing capability of the CPU, maybe this is a good idea.  Feel free to futz around with this (like putting it in with other init code).  If your program fails, follow the exam
\hich\af36\dbch\af0\loch\f39 p\hich\af36\dbch\af0\loch\f39 les.
\par 
\par }{\b\loch\af5\insrsid1389108 \hich\af36\dbch\af0\loch\f5 Player0x }{\loch\af5\insrsid1389108 \hich\af36\dbch\af0\loch\f5 = \{value or variable\}
\par }{\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39 Assigns the value to the player position so that it may be drawn at the desired screen position.  Player0x, player0y, player1x, player1y are implemented.  Eg:
\par }{\b\loch\af5\insrsid1389108 \hich\af36\dbch\af0\loch\f5 20 player0x = a
\par }{\loch\af39\insrsid1389108 
\par }{\b\f5\insrsid1389108 Scorecolor }{\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39 = \{value or variable\}
\par \hich\af36\dbch\af0\loch\f39 Sets the c\hich\af36\dbch\af0\loch\f39 olor of the on-screen score display.  Eg:
\par }{\b\loch\af5\insrsid1389108 \hich\af36\dbch\af0\loch\f5 30 scorecolor = 50
\par }{\loch\af39\insrsid1389108 
\par \hich\af36\dbch\af0\loch\f39 Pfvline \{x\} \{y\} \{length\} \{on, off, flip\}
\par \hich\af36\dbch\af0\loch\f39 Draws vertical line, using playfield graphics.  Pfhline also implemented for horizontal lines.  Eg:
\par }{\b\loch\af5\insrsid1389108 \hich\af36\dbch\af0\loch\f5 30 pfvline 5 4 4 on
\par }{\loch\af39\insrsid1389108 
\par }{\b\loch\af5\insrsid1389108 \hich\af36\dbch\af0\loch\f5 Pfpixel \{x\} \{y\} \{off, on, flip\}
\par }{\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39 Controls playfield graphics pixel at specified location.  Eg:
\par }{\b\loch\af5\insrsid1389108 \hich\af36\dbch\af0\loch\f5 112 pfpixel j 3 off
\par \hich\af36\dbch\af0\loch\f5 66 pfhline 0 0 31 on
\par }{\loch\af39\insrsid1389108 
\par 
\par }{\b\loch\af5\insrsid1389108 \hich\af36\dbch\af0\loch\f5 Drawscreen
\par }{\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39 Sets the display kernel in moti\hich\af36\dbch\af0\loch\f39 on.  This command seperates your display kernel code, from your game logic code, subroutines and init code.  Eg:
\par }{\b\loch\af5\insrsid1389108 \hich\af36\dbch\af0\loch\f5 100 drawscreen
\par }{\loch\af39\insrsid1389108 
\par }{\b\f5\insrsid1389108 Goto }{\loch\af39\insrsid1389108 \{\hich\af36\dbch\af0\loch\f39 value or variable\}
\par \hich\af36\dbch\af0\loch\f39 Causes program execution to jump to designated line number and continue.  Eg:
\par }{\b\loch\af5\insrsid1389108 \hich\af36\dbch\af0\loch\f5 30 goto 40 
\par }{\loch\af39\insrsid1389108 
\par \hich\af36\dbch\af0\loch\f39 Predefined \hich\af36\dbch\af0\loch\f39 variables used for comparisons.  Eg:
\par }{\b\loch\af5\insrsid1389108 \hich\af36\dbch\af0\loch\f5 joy0left \{right, up, down, etc..\}
\par \hich\af36\dbch\af0\loch\f5 if joy0left then goto 30
\par 
\par \hich\af36\dbch\af0\loch\f5 rand
\par }{\loch\af39\insrsid1389108 \hich\af36\dbch\af0\loch\f39 Generates 8 bit random number to be assigned to variable.  Eg:
\par }{\b\loch\af5\insrsid1389108 \hich\af36\dbch\af0\loch\f5 20 a = rand
\par }{\loch\af39\insrsid1389108 
\par 
\par \page \hich\af36\dbch\af0\loch\f39 Send changes, additions, comments to:
\par 
\par \hich\af36\dbch\af0\loch\f39 Doug Dingus
\par \hich\af36\dbch\af0\loch\f39 doug@opengeek.org
\par \hich\af36\dbch\af0\loch\f39 07/05
\par }{\field{\*\fldinst {\insrsid1389108 \hich\af36\dbch\af0\loch\f37 H\hich\af36\dbch\af0\loch\f37 YPERLINK "http://www.opengeek.org/" }{\insrsid1389108 {\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b3200000068007400740070003a002f002f007700770077002e006f00700065006e006700650065006b002e006f00720067002f000000}}}{\fldrslt {\cs36\f39\ul\cf9\insrsid1389108 
http://www.opengeek.org}}}{\insrsid1389108 
\par }{\f39\insrsid1389108 This document is licensed under the creative commons license found at }{\field{\*\fldinst {\insrsid1389108 \hich\af36\dbch\af0\loch\f37 HYPERLINK "http://www.creativecommons.org/" }{\insrsid1389108 {\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b4000000068007400740070003a002f002f007700770077002e006300720065006100740069007600650063006f006d006d006f006e0073002e006f00720067002f000000}}}{\fldrslt {
\cs36\fs24\ul\cf9\loch\af36\insrsid1389108 www.creativecommons.org}}}{\f39\insrsid1389108 .  In plain english, you may do what you like with th
is work, provided derivative works are licensed the same way and this notice is preserved intact, including original author credits and website along with additional credits that may be appropriate for future works.  Please see the Creative Commons websit
e for more details on how this license works and it's social implications.}{\insrsid1389108 
\par }{\loch\af39\insrsid1389108 
\par 
\par 
\par 
\par }}