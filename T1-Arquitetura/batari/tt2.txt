------- FILE tt2.asm LEVEL 1 PASS 2
      1  10000 ????						; yet another moving dot by Kirk Israel
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE tt2.asm
      5  f000					      org	$F000
      6  f000
      7  f000
      8  f000
      9  f000		       00 80	   YPosFromBot =	$80	;
     10  f000		       00 81	   VisiblePlayerLine =	$81	;
     11  f000		       00 82	   PlayerBuffer =	$82	;
     12  f000		       00 83	   PlayerVertSpeed =	$83	;
     13  f000		       00 84	   ButtonOnLast =	$84
     14  f000		       00 85	   Temp       =	$85
     15  f000
     16  f000		       00 86	   GravTimer  =	$86	;
     17  f000
     18  f000
     19  f000
     20  f000							;CONSTANTS
     21  f000		       00 05	   FlapStrength =	#5	;
     22  f000		       00 05	   GravDelay  =	#5	;How often does gravity pull 'em down?
     23  f000		       00 06	   MaximumSpeed =	#6
     24  f000
     25  f000							;generic start up stuff...
     26  f000				   Start
     27  f000		       78		      SEI
     28  f001		       d8		      CLD
     29  f002		       9a		      TXS
     30  f003		       a2 ff		      LDX	#$FF
     31  f005		       a9 00		      LDA	#0
     32  f007				   ClearMem
     33  f007		       95 00		      STA	0,X
     34  f009		       ca		      DEX
     35  f00a		       d0 fb		      BNE	ClearMem
     36  f00c		       a9 00		      LDA	#$00
     37  f00e		       85 09		      STA	COLUBK
     38  f010		       a9 21		      LDA	#33
     39  f012		       85 06		      STA	COLUP0
     40  f014
     41  f014
     42  f014
     43  f014
     44  f014							;Some other initialization
     45  f014		       a9 50		      LDA	#80
     46  f016		       85 80		      STA	YPosFromBot	;Initial Y Position
     47  f018		       a9 00		      LDA	#0
     48  f01a		       85 83		      STA	PlayerVertSpeed
     49  f01c		       a5 05		      LDA	GravDelay
     50  f01e		       85 86		      STA	GravTimer
     51  f020
     52  f020
     53  f020							;VSYNC time
     54  f020				   MainLoop
     55  f020		       a9 02		      LDA	#2
     56  f022		       85 00		      STA	VSYNC
     57  f024		       85 02		      STA	WSYNC
     58  f026		       85 02		      STA	WSYNC
     59  f028		       85 02		      STA	WSYNC
     60  f02a		       a9 2b		      LDA	#43
     61  f02c		       8d 96 02 	      STA	TIM64T
     62  f02f		       a9 00		      LDA	#0
     63  f031		       85 00		      STA	VSYNC
     64  f033
     65  f033
     66  f033
     67  f033				   CheckButton
     68  f033		       a5 0c		      LDA	INPT4
     69  f035		       30 12		      BMI	NoButton
     70  f037
     71  f037							;Check to see if the button was already down
     72  f037		       a5 84		      LDA	ButtonOnLast
     73  f039		       d0 0b		      BNE	ButtonWasAlreadyDown
     74  f03b
     75  f03b							;New Button Pressed Time to Flap!
     76  f03b		       a5 83		      LDA	PlayerVertSpeed
     77  f03d		       38		      SEC
     78  f03e		       e5 05		      SBC	FlapStrength
     79  f040		       85 83		      STA	PlayerVertSpeed
     80  f042
     81  f042		       a9 01		      LDA	#1
     82  f044		       85 84		      STA	ButtonOnLast
     83  f046				   ButtonWasAlreadyDown
     84  f046		       4c 4d f0 	      JMP	EndButton
     85  f049				   NoButton		;button wasn't pressed, remember that
     86  f049		       a9 00		      LDA	#0
     87  f04b		       85 84		      STA	ButtonOnLast
     88  f04d				   EndButton
     89  f04d							;Time to Add Gravity to Speed?
     90  f04d
     91  f04d		       c6 86		      DEC	GravTimer
     92  f04f		       d0 06		      BNE	DoneWithGravity
     93  f051
     94  f051		       e6 83		      INC	PlayerVertSpeed
     95  f053		       a5 05		      LDA	GravDelay
     96  f055		       85 86		      STA	GravTimer
     97  f057
     98  f057				   DoneWithGravity
     99  f057							;See if we're going too darn fast
    100  f057		       a5 83		      LDA	PlayerVertSpeed
    101  f059		       38		      SEC
    102  f05a		       e5 06		      SBC	MaximumSpeed	; Maximum Speed
    103  f05c
    104  f05c		       30 04		      BMI	SpeedNotMaxxed	;if speed - maxspeed is positive, we need to slow down
    105  f05e		       a5 06		      LDA	MaximumSpeed
    106  f060		       85 83		      STA	PlayerVertSpeed
    107  f062
    108  f062				   SpeedNotMaxxed
    109  f062							;Subtract the Player's Speed from the Position
    110  f062							;Add the negative of the Player Vert Speed to 0 in A
    111  f062		       a9 00		      LDA	#0
    112  f064		       38		      SEC
    113  f065		       e5 83		      SBC	PlayerVertSpeed
    114  f067							;Then add the current position
    115  f067		       18		      CLC
    116  f068		       65 80		      ADC	YPosFromBot
    117  f06a		       85 80		      STA	YPosFromBot
    118  f06c
    119  f06c				   FinishPositioning
    120  f06c							;check if player hit floor
    121  f06c		       a9 0a		      LDA	#10
    122  f06e		       18		      CLC
    123  f06f		       c5 80		      CMP	YPosFromBot
    124  f071		       90 08		      BCC	DoneCheckingHitFloor
    125  f073							;we need a better bounce routine, like reducing the speed?
    126  f073		       a9 04		      LDA	#4	;
    127  f075		       85 83		      STA	PlayerVertSpeed
    128  f077		       a9 0a		      LDA	#10
    129  f079		       85 80		      STA	YPosFromBot
    130  f07b
    131  f07b				   DoneCheckingHitFloor
    132  f07b							;check if player hit ceiling
    133  f07b		       a9 b4		      LDA	#180
    134  f07d		       c5 80		      CMP	YPosFromBot
    135  f07f		       b0 08		      BCS	DoneCheckingHitCeiling
    136  f081
    137  f081							;we need a better bounce routine, like reducing the speed?
    138  f081		       a9 02		      LDA	#2	;
    139  f083		       85 83		      STA	PlayerVertSpeed
    140  f085
    141  f085		       a9 b4		      LDA	#180
    142  f087		       85 80		      STA	YPosFromBot
    143  f089
    144  f089				   DoneCheckingHitCeiling
    145  f089							;assum horiz movement will be zero
    146  f089		       a2 00		      LDX	#$00
    147  f08b		       a9 40		      LDA	#$40	;Left?
    148  f08d		       2c 80 02 	      BIT	SWCHA
    149  f090		       d0 06		      BNE	SkipMoveLeft
    150  f092		       a2 10		      LDX	#$10
    151  f094		       a5 08		      LDA	%00001000
    152  f096		       85 0b		      STA	REFP0
    153  f098
    154  f098				   SkipMoveLeft
    155  f098		       a9 80		      LDA	#$80	;Right?
    156  f09a		       2c 80 02 	      BIT	SWCHA
    157  f09d		       d0 06		      BNE	SkipMoveRight
    158  f09f		       a2 f0		      LDX	#$F0
    159  f0a1		       a5 00		      LDA	%00000000
    160  f0a3		       85 0b		      STA	REFP0
    161  f0a5
    162  f0a5				   SkipMoveRight
    163  f0a5		       86 20		      STX	HMP0	;set horiz movement for player 0
    164  f0a7
    165  f0a7				   WaitForVblankEnd
    166  f0a7		       ad 84 02 	      LDA	INTIM
    167  f0aa		       d0 fb		      BNE	WaitForVblankEnd
    168  f0ac		       a0 bf		      LDY	#191
    169  f0ae
    170  f0ae		       85 01		      STA	VBLANK
    171  f0b0
    172  f0b0		       85 02		      STA	WSYNC
    173  f0b2		       85 2a		      STA	HMOVE
    174  f0b4
    175  f0b4							;main scanline loop...
    176  f0b4				   ScanLoop
    177  f0b4		       85 02		      STA	WSYNC
    178  f0b6
    179  f0b6							; here the idea is that VisiblePlayerLine
    180  f0b6							; is zero if the line isn't being drawn now,
    181  f0b6							; otherwise it's however many lines we have to go
    182  f0b6		       a5 82		      LDA	PlayerBuffer
    183  f0b8		       85 1b		      STA	GRP0
    184  f0ba
    185  f0ba				   CheckActivatePlayer
    186  f0ba		       c4 80		      CPY	YPosFromBot
    187  f0bc		       d0 04		      BNE	SkipActivatePlayer
    188  f0be		       a9 08		      LDA	#8
    189  f0c0		       85 81		      STA	VisiblePlayerLine
    190  f0c2
    191  f0c2				   SkipActivatePlayer
    192  f0c2
    193  f0c2							;turn player off then see if it should be on
    194  f0c2		       a9 00		      LDA	#00
    195  f0c4
    196  f0c4							;
    197  f0c4							;if the VisiblePlayerLine is non zero,
    198  f0c4							;we're drawing it
    199  f0c4							;
    200  f0c4		       a6 81		      LDX	VisiblePlayerLine
    201  f0c6		       f0 05		      BEQ	FinishPlayer
    202  f0c8				   IsPlayerOn
    203  f0c8		       bd ff fe 	      LDA	BigHeadGraphic-1,X
    204  f0cb		       c6 81		      DEC	VisiblePlayerLine
    205  f0cd				   FinishPlayer
    206  f0cd		       85 82		      STA	PlayerBuffer
    207  f0cf
    208  f0cf		       88		      DEY
    209  f0d0		       d0 e2		      BNE	ScanLoop
    210  f0d2
    211  f0d2		       a9 02		      LDA	#2
    212  f0d4		       85 02		      STA	WSYNC
    213  f0d6		       85 01		      STA	VBLANK
    214  f0d8		       a2 1e		      LDX	#30
    215  f0da				   OverScanWait
    216  f0da		       85 02		      STA	WSYNC
    217  f0dc		       ca		      DEX
    218  f0dd		       d0 fb		      BNE	OverScanWait
    219  f0df		       4c 20 f0 	      JMP	MainLoop
    220  f0e2
    221  ff00					      org	$FF00
    222  ff00				   BigHeadGraphic
    223  ff00		       00		      .byte.b	%00000000
    224  ff01							;.byte %01111110
    225  ff01							;.byte %11000001
    226  ff01							;.byte %10111111
    227  ff01							;.byte %11111111
    228  ff01							;.byte %11101011
    229  ff01							;.byte %01111110
    230  ff01							;.byte %00111100
    231  ff01
    232  fffc					      org	$FFFC
    233  fffc		       00 f0		      .word.w	Start
    234  fffe		       00 f0		      .word.w	Start
    235  10000
    236  10000
    237  10000
    238  10000
    239  10000
    240  10000
    241  10000
    242  10000							;	LDA YPosFromBot
    243  10000							;	STA COLUBK
