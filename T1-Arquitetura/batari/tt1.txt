------- FILE tt1.asm LEVEL 1 PASS 2
      1  10000 ????						;
      2  10000 ????						; How to Draw A Playfield.
      3  10000 ????						; by Nick Bensema  9:23PM  3/2/97
      4  10000 ????						;
      5  10000 ????						; Atari 2600 programming is different from any other kind of programming
      6  10000 ????						; in many ways.  Just one of these ways is the flow of the program.
      7  10000 ????						;
      8  10000 ????						; Since the CPU must hold tha TIA's hand through all graphical operations,
      9  10000 ????						; the flow ought to go like this:
     10  10000 ????						;
     11  10000 ????						; Clear memory and registers
     12  10000 ????						; Set up variables
     13  10000 ????						; Loop:
     14  10000 ????						;    Do the vertical blank
     15  10000 ????						;    Do game calculations
     16  10000 ????						;    Draw screen
     17  10000 ????						;    Do more calculations during overscan
     18  10000 ????						;    Wait for next vertical blank
     19  10000 ????						; End Loop.
     20  10000 ????						;
     21  10000 ????						; What I will do is create an outline, and explain everything I can.
     22  10000 ????						; This program will display "HELLO" and scroll it down the screen.
     23  10000 ????						;
     24  10000 ????						; In writing this program, I will take the opportunity to show you
     25  10000 ????						; how a few simple modifications can completely change a program's
     26  10000 ????						; appearance or behavior.  I will invite you to comment out a few
     27  10000 ????						; lines of code, and alter others, so that you can observe the results.
     28  10000 ????						;
     29  10000 ????						; I will be using DASM for now.  Conversion to A65 should be trivial.
     30  10000 ????						;
     31  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE tt1.asm
     33  10000 ????
     34  f000					      org	$F000
     35  f000
     36  f000		       00 80	   Temp       =	$80
     37  f000		       00 90	   PlayfieldY =	$90
     38  f000
     39  f000				   Start
     40  f000							;
     41  f000							; The 2600 powers up in a completely random state, except for the PC which
     42  f000							; is set to the location at $FFC.  Therefore the first thing we must do is
     43  f000							; to set everything up inside the 6502.
     44  f000							;
     45  f000		       78		      SEI		; Disable interrupts, if there are any.
     46  f001		       d8		      CLD		; Clear BCD math bit.
     47  f002							;
     48  f002							; You may feel the need to use the stack, in which case:
     49  f002							;
     50  f002		       a2 ff		      LDX	#$FF
     51  f004		       9a		      TXS		; Set stack to beginning.
     52  f005							;
     53  f005							; Now the memory and TIA registers must be cleared.  You may feel the
     54  f005							; need to write a subroutine that only clears out a certain section of
     55  f005							; memory, but for now a simple loop will suffice.
     56  f005							;
     57  f005							; Since X is already loaded to 0xFF, our task becomes simply to ocunt
     58  f005							; everything off.
     59  f005							;
     60  f005		       a9 00		      LDA	#0
     61  f007		       95 00	   B1	      STA	0,X
     62  f009		       ca		      DEX
     63  f00a		       d0 fb		      BNE	B1
     64  f00c							;
     65  f00c							; The above routine does not clear location 0, which is VSYNC.  We will
     66  f00c							; take care of that later.
     67  f00c							;
     68  f00c							; At this point in the code we would set up things like the data
     69  f00c							; direction registers for the joysticks and such.
     70  f00c							;
     71  f00c		       20 9e f0 	      JSR	GameInit
     72  f00f							;
     73  f00f							; Here is a representation of our program flow.
     74  f00f							;
     75  f00f				   MainLoop
     76  f00f		       20 21 f0 	      JSR	VerticalBlank	;Execute the vertical blank.
     77  f012		       20 3f f0 	      JSR	CheckSwitches	;Check console switches.
     78  f015		       20 44 f0 	      JSR	GameCalc	;Do calculations during Vblank
     79  f018		       20 47 f0 	      JSR	DrawScreen	;Draw the screen
     80  f01b		       20 96 f0 	      JSR	OverScan	;Do more calculations during overscan
     81  f01e		       4c 0f f0 	      JMP	MainLoop	;Continue forever.
     82  f021							;
     83  f021							; It is important to maintain a stable screen, and this routine
     84  f021							; does some important and mysterious things.  Actually, the only
     85  f021							; mysterious part is VSYNC.  All VBLANK does is blank the TIA's
     86  f021							; output so that no graphics are drawn; otherwise the screen
     87  f021							; scans normally.  It is VSYNC which tells the TV to pack its
     88  f021							; bags and move to the other corner of the screen.
     89  f021							;
     90  f021							; Fortunately, my program sets VBLANK at the beginning of the
     91  f021							; overscan period, which usually precedes this subroutine, so
     92  f021							; it is not changed here.
     93  f021							;
     94  f021				   VerticalBlank
     95  f021		       a2 00		      LDX	#0
     96  f023		       a9 02		      LDA	#2
     97  f025		       85 02		      STA	WSYNC
     98  f027		       85 02		      STA	WSYNC
     99  f029		       85 02		      STA	WSYNC
    100  f02b		       85 00		      STA	VSYNC	;Begin vertical sync.
    101  f02d		       85 02		      STA	WSYNC	; First line of VSYNC
    102  f02f		       85 02		      STA	WSYNC	; Second line of VSYNC.
    103  f031							;
    104  f031							; But before we finish off the third line of VSYNC, why don't we
    105  f031							; use this time to set the timer?  This will save us a few cycles
    106  f031							; which would be more useful in the overscan area.
    107  f031							;
    108  f031							; To insure that we begin to draw the screen at the proper time,
    109  f031							; we must set the timer to go off just slightly before the end of
    110  f031							; the vertical blank space, so that we can WSYNC up to the ACTUAL
    111  f031							; end of the vertical blank space.  Of course, the scanline we're
    112  f031							; going to omit is the same scanline we were about to waste VSYNCing,
    113  f031							; so it all evens out.
    114  f031							;
    115  f031							; Atari says we have to have 37 scanlines of VBLANK time.  Since
    116  f031							; each scanline uses 76 cycles, that makes 37*76=2888 cycles.
    117  f031							; We must also subtract the five cycles it will take to set the
    118  f031							; timer, and the three cycles it will take to STA WSYNC to the next
    119  f031							; line.  Plus the checking loop is only accurate to six cycles, making
    120  f031							; a total of fourteen cycles we have to waste.  2888-14=2876.
    121  f031							;
    122  f031							; We almost always use TIM64T for this, since the math just won't
    123  f031							; work out with the other intervals.  2880/64=44.something.  It
    124  f031							; doesn't matter what that something is, we have to round DOWN.
    125  f031							;
    126  f031		       a9 2c		      LDA	#44
    127  f033		       8d 96 02 	      STA	TIM64T
    128  f036							;
    129  f036							; And now's as good a time as any to clear the collision latches.
    130  f036							;
    131  f036		       a9 00		      LDA	#0
    132  f038		       85 2c		      STA	CXCLR
    133  f03a							;
    134  f03a							; Now we can end the VSYNC period.
    135  f03a							;
    136  f03a		       85 02		      STA	WSYNC	; Third line of VSYNC.
    137  f03c		       85 00		      STA	VSYNC	; (0)
    138  f03e							;
    139  f03e							; At this point in time the screen is scanning normally, but
    140  f03e							; the TIA's output is suppressed.  It will begin again once
    141  f03e							; 0 is written back into VBLANK.
    142  f03e							;
    143  f03e		       60		      RTS
    144  f03f							;
    145  f03f							; Checking the game switches is relatively simple.  Theoretically,
    146  f03f							; some of it could be slipped between WSYNCs in the VBlank code.
    147  f03f							; But we're going for clarity here.
    148  f03f							;
    149  f03f							; It just so happens that I'm not going to check any game switches
    150  f03f							; here.  I'm just going to set up the colors, without even checking
    151  f03f							; the B&W switch!  HA!
    152  f03f							;
    153  f03f				   CheckSwitches
    154  f03f		       a9 00		      LDA	#0
    155  f041		       85 09		      STA	COLUBK	; Background will be black.
    156  f043		       60		      RTS
    157  f044							;
    158  f044							; Minimal game calculations, just to get the ball rolling.
    159  f044							;
    160  f044				   GameCalc
    161  f044		       e6 90		      INC	PlayfieldY	;Inch up the playfield
    162  f046		       60		      RTS
    163  f047
    164  f047							;
    165  f047							; This is the scariest thing I've done all month.
    166  f047							;
    167  f047				   DrawScreen
    168  f047		       ad 84 02 	      LDA	INTIM
    169  f04a		       d0 fb		      BNE	DrawScreen	; Whew!
    170  f04c		       85 02		      STA	WSYNC
    171  f04e		       85 01		      STA	VBLANK	;End the VBLANK period with a zero.
    172  f050							;
    173  f050							; Now we can do what we need to do.  What sort of playfield do
    174  f050							; we want to show?  A doubled playfield will work better than
    175  f050							; anything if we either want a side scroller (which involves some
    176  f050							; tricky bit shifting, usually) or an asymmetrical playfield (which
    177  f050							; we're not doing yet).  A mirrored playfield is usually best for
    178  f050							; vertical scrollers.	With some creativity, you can use both in your
    179  f050							; game.
    180  f050							;
    181  f050							; The "score" bit is useful for drawing scores with playfield graphics
    182  f050							; as Combat and other early games do.	It can also create a neat effect
    183  f050							; if you know how to be creative with it.  One useful application of
    184  f050							; score mode would be always having player 1 on the left side, and
    185  f050							; player 0 on the right side.	Each player would be surrounded in the
    186  f050							; opposite color, and the ball graphic could be used to stand out
    187  f050							; against either one.	On my 2600jr, color from the right side bleeds
    188  f050							; about one pixel into the left side, so don't think it's perfect.
    189  f050							; It's really far from perfect because PC Atari does not implement
    190  f050							; it at all; both sides appear as Player 0's color.  A26 does, though.
    191  f050							;
    192  f050							; To accomodate this, my routine puts color values into
    193  f050							; COLUP0 for the left side, and COLUP1 for the right side.  Change
    194  f050							; the LDA operand to 0 or 1 to use the normal system.	The code in
    195  f050							; the scanning loop accounts for both systems.
    196  f050							;
    197  f050		       a9 02		      LDA	#2
    198  f052		       85 0a		      STA	CTRLPF
    199  f054							;
    200  f054							; Initialize some display variables.
    201  f054							;
    202  f054							;There aren't any display variables!
    203  f054							;
    204  f054							; I'm going to use the Y register to count scanlines this time.
    205  f054							; Realize that I am forfeiting the use of the Y register for this
    206  f054							; purpose, but DEC Zero Page takes five cycles as opposed to DEY's
    207  f054							; two, and LDA Zero Page takes three cycles as opposed to TYA's two.
    208  f054							;
    209  f054							; I'm using all 191 remaining scanlines after the WSYNC.  If you
    210  f054							; want less, or more, change the LDY line.
    211  f054							;
    212  f054							; This is a decremental loop, that is, Y starts at 191 and continues
    213  f054							; down to 0, as do all functions of Y such as memory locations, which
    214  f054							; is why the graphics at the end of this file are stored "bottom-up".
    215  f054							; In a way, one could say that's how the screen is drawn.  To turn this
    216  f054							; into an incremental loop, change the number to 255-191 (65) and change
    217  f054							; the DEY at the end ot the scanning loop to INY.
    218  f054							;
    219  f054		       a0 bf		      LDY	#191
    220  f056							;
    221  f056							; Okay, now THIS is scary.  I decided to put the bulk of my comments
    222  f056							; BEFORE the code, rather than inside it, so that you can look at the
    223  f056							; code all at once.
    224  f056							;
    225  f056							; Notice the new method of cycle counting I use.  I'll send an update
    226  f056							; to cyccount.txt RSN.
    227  f056							;
    228  f056							; This routine came out surprisingly clean.  There are no branches,
    229  f056							; and most updates are made even before PF0 becomes visible at cycle 23,
    230  f056							; even though PF1 and PF2 don't become visible until, by my estimate,
    231  f056							; cycles 29 and 40, respectively.  We could use this time to get player
    232  f056							; shape and colors from temp variables and sneak them in, but that's
    233  f056							; another file.  In fact, at the last minute I re-arranged things
    234  f056							; and threw in some color changes.
    235  f056							;
    236  f056							; The playfield will only be moved up every 4 scanlines, so it doesn't look
    237  f056							; squished.  I could have updated it every 2 scanlines, and that would have
    238  f056							; saved two cycles. I could have saved another two cycles by having it
    239  f056							; change EVERY scanline.  Comment out one or both of the ASL's to see what
    240  f056							; this would look like.  I realize that it updates the PF registers whether
    241  f056							; it needs it or not, but it would be pointless to branch around these
    242  f056							; updates.  Better to know you're wasting cycles and have them counted
    243  f056							; than to get unlucky and have your code spill into the next scanline
    244  f056							; every time too many things get updated.
    245  f056							;
    246  f056							; This is going to be a moving playfield.  For a stationary playfield,
    247  f056							; comment out the SEC and SBC lines.  That's probably what most of you all
    248  f056							; are going to want, anyway.  And for a really good moving playfield,
    249  f056							; like in River Raid or Vanguard, you'll need slightly more interesting
    250  f056							; code than I'm prepared to provide.
    251  f056							;
    252  f056							; I also could have made the playfield graphic 16 bytes high, or 32, or 64,
    253  f056							; by changing only my data and the AND line.  AND can serve as a modulus
    254  f056							; for any power of two (2^n) up to 128, by ANDing a byte with that number
    255  f056							; minus one ( (2^n)-1 ).  8 bytes * every 4 scanlines == 32, which is
    256  f056							; a power of two, which is why this works.  Try commenting out the AND line
    257  f056							; and see how the program interprets it.  Remember that PlayfieldY goes
    258  f056							; up to 255.
    259  f056							;
    260  f056							; But you won't need to worry about that if you're drawing a stationary
    261  f056							; playfield where the graphics data is so large, it doesn't need to repeat.
    262  f056							; In that case, you don't need the AND line and you don't need to make sure
    263  f056							; your graphics are 2^n bytes tall.  Comment out the AND, SEC and SBC lines,
    264  f056							; and add a third LSR to the block of two.  It indexes a bit too far at the
    265  f056							; top of the screen, which explains the garbage.  You can fix that problem
    266  f056							; either by adding more data to the end of each array, or by decreasing
    267  f056							; the resolution by adding a fourth or fifth LSR.
    268  f056							;
    269  f056							; And who's to say you'll need all three playfield registers?	Perhaps
    270  f056							; you have a rather narrow playfield, or one that's always clear in the
    271  f056							; middle.  Either choice will save you five cycles per scanline.
    272  f056							;
    273  f056							; As you can see, it can be trimmed down quite a bit, and I still have
    274  f056							; a lot of cycles left over.  The maximum, if you recall, is 73 if you
    275  f056							; plan to use STA WSYNC, and I pity the fool who doesn't.
    276  f056
    277  f056				   ScanLoop
    278  f056							; Result of the following math is:
    279  f056							;  X = ( (Y-PlayfieldY) /4 ) mod 7
    280  f056		       98		      TYA
    281  f057		       38		      SEC
    282  f058		       e5 90		      SBC	PlayfieldY
    283  f05a		       4a		      LSR		;Divide by 4
    284  f05b		       4a		      LSR
    285  f05c		       29 07		      AND	#7	;modulo 8
    286  f05e		       aa		      TAX
    287  f05f		       bd 00 ff 	      LDA	PFData0,X	;Load ahead of time.
    288  f062							; WSYNC is placed BEFORE all of this action takes place.
    289  f062		       85 02		      STA	WSYNC
    290  f064		       85 0d		      STA	PF0	;[0] +3 = *3*	 < 23
    291  f066		       bd 18 ff 	      LDA	PFLColor,X	;[3] +4
    292  f069							;In a real game, I wouldn't be this redundant.
    293  f069		       85 06		      STA	COLUP0	;[7] +3 = *10*  < 23
    294  f06b		       85 08		      STA	COLUPF	;[10]+3 = *13*  < 23
    295  f06d		       bd 08 ff 	      LDA	PFData1,X	;[13]+4
    296  f070		       85 0e		      STA	PF1	;[17]+3 = *20*  < 29
    297  f072		       bd 20 ff 	      LDA	PFRColor,X	;[20]+4
    298  f075		       85 07		      STA	COLUP1	;[24]+3 = *27*  < 49
    299  f077		       bd 10 ff 	      LDA	PFData2,X	;[27]+4
    300  f07a		       85 0f		      STA	PF2	;[31]+3 = *34*  < 40
    301  f07c		       88		      DEY
    302  f07d		       d0 d7		      BNE	ScanLoop
    303  f07f							;
    304  f07f							; Clear all registers here to prevent any possible bleeding.
    305  f07f							;
    306  f07f		       a9 02		      LDA	#2
    307  f081		       85 02		      STA	WSYNC	;Finish this scanline.
    308  f083		       85 01		      STA	VBLANK	; Make TIA output invisible,
    309  f085							; Now we need to worry about it bleeding when we turn
    310  f085							; the TIA output back on.
    311  f085							; Y is still zero.
    312  f085		       84 0d		      STY	PF0
    313  f087		       84 0e		      STY	PF1
    314  f089		       84 0e		      STY	PF1
    315  f08b		       84 1b		      STY	GRP0
    316  f08d		       84 1c		      STY	GRP1
    317  f08f		       84 1d		      STY	ENAM0
    318  f091		       84 1e		      STY	ENAM1
    319  f093		       84 1f		      STY	ENABL
    320  f095		       60		      RTS
    321  f096
    322  f096							;
    323  f096							; For the Overscan routine, one might take the time to process such
    324  f096							; things as collisions.  I, however, would rather waste a bunch of
    325  f096							; scanlines, since I haven't drawn any players yet.
    326  f096							;
    327  f096				   OverScan		;We've got 30 scanlines to kill.
    328  f096		       a2 1e		      LDX	#30
    329  f098				   KillLines
    330  f098		       85 02		      STA	WSYNC
    331  f09a		       ca		      DEX
    332  f09b		       d0 fb		      BNE	KillLines
    333  f09d		       60		      RTS
    334  f09e
    335  f09e							;
    336  f09e							; GameInit could conceivably be called when the Select key is pressed,
    337  f09e							; or some other event.
    338  f09e							;
    339  f09e				   GameInit
    340  f09e		       a9 00		      LDA	#0
    341  f0a0		       85 90		      STA	PlayfieldY
    342  f0a2		       60		      RTS
    343  f0a3
    344  f0a3							;
    345  f0a3							; Graphics are placed so that the extra cycle in the PFData,X indexes
    346  f0a3							; is NEVER taken, by making sure it never has to index across a page
    347  f0a3							; boundary.  This way our cycle count holds true.
    348  f0a3							;
    349  f0a3
    350  ff00					      org	$FF00
    351  ff00							;
    352  ff00							; This is the tricky part of drawing a playfield: actually
    353  ff00							; drawing it.	Well, the display routine and all that binary
    354  ff00							; math was a bit tricky, too, but still, listen up.
    355  ff00							;
    356  ff00							; Playfield data isn't stored the way most bitmaps are, even
    357  ff00							; one-dimensional bitmaps.  We will use the left side of the
    358  ff00							; screen only, knowing that the right side is either repeated
    359  ff00							; or reflected from it.
    360  ff00							;
    361  ff00							; In PF0 and PF2, the most significant bit (bit 7) is on the RIGHT
    362  ff00							; side.  In PF1, the most significant bit is on the LEFT side.  This
    363  ff00							; means that relative to PF0 and PF2, PF1 has a reversed bit order.
    364  ff00							; It's just really weird.
    365  ff00							;
    366  ff00							;    PF0  |	 PF1	   |	  PF2
    367  ff00							;  4 5 6 7|7 6 5 4 3 2 1 0|0 1 2 3 4 5 6 7
    368  ff00							;
    369  ff00							; This is important to remember when doing calculations on bytes intended
    370  ff00							; for the PF registers.  Defender gives a good example of this.
    371  ff00							;
    372  ff00							; It will become necessary to write a program that makes this easier,
    373  ff00							; because it is easy to become confused when dealing with this system.
    374  ff00							;
    375  ff00				   PFData0		;H	  4 5 6 7
    376  ff00		       00 f0 00 a0*	      .byte.b	$00,$f0,$00,$A0,$A0,$E0,$A0,$A0
    377  ff08				   PFData1		;EL	  7 6 5 4 3 2 1 0
    378  ff08		       00 ff 00 77*	      .byte.b	$00,$FF,$00,$77,$44,$64,$44,$74
    379  ff10				   PFData2		;LO	  0 1 2 3 4 5 6 7
    380  ff10		       00 ff 00 ee*	      .byte.b	$00,$FF,$00,$EE,$A2,$A2,$A2,$E2
    381  ff18				   PFLColor		; Left side of screen
    382  ff18		       00 ff 00 22*	      .byte.b	$00,$FF,$00,$22,$26,$2A,$2C,$2E
    383  ff20				   PFRColor		; Right side of screen
    384  ff20		       00 1f 00 6e*	      .byte.b	$00,$1F,$00,$6E,$6C,$6A,$66,$62
    385  ff28
    386  fffc					      org	$FFFC
    387  fffc		       00 f0		      .word.w	Start
    388  fffe		       00 f0		      .word.w	Start
