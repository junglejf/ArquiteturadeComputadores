------- FILE t2.asm LEVEL 1 PASS 2
      1  10000 ????						; move a dot with the joystick by Kirk Israel
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	vcs.h
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE t2.asm
      5  f000					      org	$F000
      6  f000
      7  f000		       00 80	   YPosFromBot =	$80	;
      8  f000		       00 81	   VisibleMissileLine =	$81	;
      9  f000
     10  f000							;generic start up stuff...
     11  f000				   Start
     12  f000		       78		      SEI
     13  f001		       d8		      CLD
     14  f002		       a2 ff		      LDX	#$FF
     15  f004		       9a		      TXS
     16  f005		       a9 00		      LDA	#0
     17  f007				   ClearMem
     18  f007		       95 00		      STA	0,X
     19  f009		       ca		      DEX
     20  f00a		       d0 fb		      BNE	ClearMem
     21  f00c		       a9 12		      LDA	#$12
     22  f00e		       85 09		      STA	COLUBK	;start with black background
     23  f010		       a9 42		      LDA	#66
     24  f012		       85 06		      STA	COLUP0
     25  f014							;Setting some variables...
     26  f014		       a9 50		      LDA	#80
     27  f016		       85 80		      STA	YPosFromBot	;Initial Y Position
     28  f018
     29  f018		       a9 20		      LDA	#$20
     30  f01a		       85 04		      STA	NUSIZ0	;Quad Width
     31  f01c
     32  f01c
     33  f01c							;VSYNC time
     34  f01c				   MainLoop
     35  f01c		       a9 02		      LDA	#2
     36  f01e		       85 00		      STA	VSYNC
     37  f020		       85 02		      STA	WSYNC
     38  f022		       85 02		      STA	WSYNC
     39  f024		       85 02		      STA	WSYNC
     40  f026		       a9 2b		      LDA	#43
     41  f028		       8d 96 02 	      STA	TIM64T
     42  f02b		       a9 00		      LDA	#0
     43  f02d		       85 00		      STA	VSYNC
     44  f02f
     45  f02f
     46  f02f							;Main Computations; check down, up, left, right
     47  f02f							;general idea is to do a BIT compare to see if
     48  f02f							;a certain direction is pressed, and skip the value
     49  f02f							;change if so
     50  f02f
     51  f02f							;
     52  f02f							;Not the most effecient code, but gets the job done,
     53  f02f							;including diagonal movement
     54  f02f							;
     55  f02f
     56  f02f							; for up and down, we INC or DEC
     57  f02f							; the Y Position
     58  f02f
     59  f02f		       a9 10		      LDA	#%00010000	;Down?
     60  f031		       2c 80 02 	      BIT	SWCHA
     61  f034		       d0 02		      BNE	SkipMoveDown
     62  f036		       e6 80		      INC	YPosFromBot
     63  f038				   SkipMoveDown
     64  f038
     65  f038		       a9 20		      LDA	#%00100000	;Up?
     66  f03a		       2c 80 02 	      BIT	SWCHA
     67  f03d		       d0 02		      BNE	SkipMoveUp
     68  f03f		       c6 80		      DEC	YPosFromBot
     69  f041				   SkipMoveUp
     70  f041
     71  f041							; for left and right, we're gonna
     72  f041							; set the horizontal speed, and then do
     73  f041							; a single HMOVE.  We'll use X to hold the
     74  f041							; horizontal speed, then store it in the
     75  f041							; appropriate register
     76  f041
     77  f041
     78  f041							;assum horiz speed will be zero
     79  f041		       a2 00		      LDX	#0
     80  f043
     81  f043		       a9 40		      LDA	#%01000000	;Left?
     82  f045		       2c 80 02 	      BIT	SWCHA
     83  f048		       d0 02		      BNE	SkipMoveLeft
     84  f04a		       a2 10		      LDX	#$10	;a 1 in the left nibble means go left
     85  f04c				   SkipMoveLeft
     86  f04c
     87  f04c		       a9 80		      LDA	#%10000000	;Right?
     88  f04e		       2c 80 02 	      BIT	SWCHA
     89  f051		       d0 02		      BNE	SkipMoveRight
     90  f053		       a2 f0		      LDX	#$F0	;a -1 in the left nibble means go right...
     91  f055				   SkipMoveRight
     92  f055							;(in 4 bits, using "two's complement
     93  f055							; notation", binary 1111 = decimal -1
     94  f055							; (which we write there as hex F --
     95  f055							; confused?))
     96  f055
     97  f055
     98  f055		       86 22		      STX	HMM0	;set the move for missile 0
     99  f057
    100  f057
    101  f057							; while we're at it, change the color of the background
    102  f057							; if the button is pressed (making sure D6 of VBLANK has
    103  f057							; appropriately set above) We'll set the background color
    104  f057							; to the vertical position, since that will be changing
    105  f057							; a lot but we can still control it.
    106  f057
    107  f057		       a5 0c		      LDA	INPT4	;read button input
    108  f059		       30 04		      BMI	ButtonNotPressed	;skip if button not pressed
    109  f05b		       a5 80		      LDA	YPosFromBot	;must be pressed, get YPos
    110  f05d		       85 09		      STA	COLUBK	;load into bgcolor
    111  f05f				   ButtonNotPressed
    112  f05f
    113  f05f
    114  f05f
    115  f05f				   WaitForVblankEnd
    116  f05f		       ad 84 02 	      LDA	INTIM
    117  f062		       d0 fb		      BNE	WaitForVblankEnd
    118  f064		       a0 bf		      LDY	#191
    119  f066		       85 02		      STA	WSYNC
    120  f068		       85 01		      STA	VBLANK
    121  f06a
    122  f06a		       85 02		      STA	WSYNC
    123  f06c		       85 2a		      STA	HMOVE
    124  f06e
    125  f06e							;main scanline loop...
    126  f06e							;
    127  f06e							;(this probably ends the "new code" section of today's
    128  f06e							; lesson...)
    129  f06e
    130  f06e
    131  f06e				   ScanLoop
    132  f06e		       85 02		      STA	WSYNC
    133  f070
    134  f070							; here the idea is that VisibleMissileLine
    135  f070							; is zero if the line isn't being drawn now,
    136  f070							; otherwise it's however many lines we have to go
    137  f070
    138  f070				   CheckActivateMissile
    139  f070		       c4 80		      CPY	YPosFromBot
    140  f072		       d0 04		      BNE	SkipActivateMissile
    141  f074		       a9 08		      LDA	#8
    142  f076		       85 81		      STA	VisibleMissileLine
    143  f078				   SkipActivateMissile
    144  f078
    145  f078							;turn missile off then see if it's turned on
    146  f078		       a9 00		      LDA	#0
    147  f07a		       85 1d		      STA	ENAM0
    148  f07c							;
    149  f07c							;if the VisibleMissileLine is non zero,
    150  f07c							;we're drawing it
    151  f07c							;
    152  f07c		       a5 81		      LDA	VisibleMissileLine
    153  f07e		       f0 06		      BEQ	FinishMissile
    154  f080				   IsMissileOn
    155  f080		       a9 02		      LDA	#2
    156  f082		       85 1d		      STA	ENAM0
    157  f084		       c6 81		      DEC	VisibleMissileLine
    158  f086				   FinishMissile
    159  f086
    160  f086
    161  f086		       88		      DEY
    162  f087		       d0 e5		      BNE	ScanLoop
    163  f089
    164  f089		       a9 02		      LDA	#2
    165  f08b		       85 02		      STA	WSYNC
    166  f08d		       85 01		      STA	VBLANK
    167  f08f		       a2 1e		      LDX	#30
    168  f091				   OverScanWait
    169  f091		       85 02		      STA	WSYNC
    170  f093		       ca		      DEX
    171  f094		       d0 fb		      BNE	OverScanWait
    172  f096		       4c 1c f0 	      JMP	MainLoop
    173  f099
    174  fffc					      org	$FFFC
    175  fffc		       00 f0		      .word.w	Start
    176  fffe		       00 f0		      .word.w	Start
